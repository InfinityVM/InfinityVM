# Base image with necessary tools and Rust setup
FROM amd64/ubuntu:20.04 as chef
WORKDIR /app
ENV DEBIAN_FRONTEND=noninteractive

RUN uname -m
# Install dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    clang \
    curl \
    libssl-dev \
    pkg-config \
    cmake \
    build-essential \
    protobuf-compiler \
    ca-certificates \
    libclang-dev \
    git \
    python3 \
    ninja-build && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL 'https://sh.rustup.rs' | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

RUN rustup toolchain install nightly

# Install Cargo Binstall and Risc0
RUN cargo install cargo-binstall
RUN cargo binstall -y --force cargo-risczero

# Set RUSTFLAGS environment variable
ENV RUSTFLAGS="-C link-arg=-lgcc"
# Install the Risc0 toolchain
RUN cargo risczero install

# Prepare Cargo Chef
FROM chef as planner
COPY rust /app/rust
COPY proto /app/proto
RUN cargo chef prepare --recipe-path recipe.json

# Cache dependencies
FROM chef as cacher
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# Build the application
FROM chef AS builder
COPY --from=cacher /app/target /app/target
COPY rust /app/rust
COPY proto /app/proto
RUN cargo build --release --locked --manifest-path /app/rust/Cargo.toml

# Final image with only the necessary runtime environment
FROM debian:bookworm-slim
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates && \
    rm -rf /var/lib/apt/lists/*
COPY --from=builder /app/target/release/executor /usr/local/bin/executor
CMD ["executor", "version"]
