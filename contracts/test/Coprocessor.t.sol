// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {JobManager} from "../src/JobManager.sol";
import {Consumer} from "../src/Consumer.sol";
import {MockConsumer} from "./mocks/MockConsumer.sol";
import {CoprocessorDeployer} from "../script/CoprocessorDeployer.s.sol";

contract CoprocessorTest is Test, CoprocessorDeployer {
    uint64 DEFAULT_MAX_CYCLES = 1_000_000;
    address RELAYER = address(1);
    address COPROCESSOR_OPERATOR = 0x184c47137933253f49325B851307Ab1017863BD0;
    address OFFCHAIN_SIGNER = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;
    uint64 DEFAULT_NONCE = 1;
    bytes32 DEFAULT_JOB_ID;

    event JobCreated(bytes32 indexed jobID, uint64 indexed nonce, address indexed consumer, uint64 maxCycles, bytes programID, bytes programInput);
    event JobCancelled(bytes32 indexed jobID);
    event JobCompleted(bytes32 indexed jobID, bytes result);

    function setUp() public {
        uint64 initialMaxNonce = 0;
        deployCoprocessorContracts(RELAYER, COPROCESSOR_OPERATOR, OFFCHAIN_SIGNER, initialMaxNonce, false);
        DEFAULT_JOB_ID = keccak256(abi.encodePacked(DEFAULT_NONCE, address(consumer)));
    }

    function test_JobManager_CreateJob() public {
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);
        vm.expectEmit(true, true, true, true);
        emit JobCreated(DEFAULT_JOB_ID, DEFAULT_NONCE, address(consumer), DEFAULT_MAX_CYCLES, "programID", "programInput");
        vm.prank(address(consumer));
        bytes32 jobID = jobManager.createJob(DEFAULT_NONCE, "programID", "programInput", DEFAULT_MAX_CYCLES);
        assertEq(jobID, DEFAULT_JOB_ID);
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(jobID);
        assertEq(jobMetadata.programID, "programID");
        assertEq(jobMetadata.maxCycles, DEFAULT_MAX_CYCLES);
        assertEq(jobMetadata.consumer, address(consumer));
        assertEq(jobMetadata.status, 1);
    }

    function test_Consumer_RequestJob() public {
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);
        vm.expectEmit(true, true, true, true);
        emit JobCreated(DEFAULT_JOB_ID, DEFAULT_NONCE, address(consumer), DEFAULT_MAX_CYCLES, "programID", abi.encode(address(0)));
        bytes32 jobID = consumer.requestBalance("programID", address(0));
        assertEq(jobID, DEFAULT_JOB_ID);
        assertEq(consumer.getProgramInputsForJob(jobID), abi.encode(address(0)));
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(jobID);
        assertEq(jobMetadata.programID, "programID");
        assertEq(jobMetadata.maxCycles, DEFAULT_MAX_CYCLES);
        assertEq(jobMetadata.consumer, address(consumer));
        assertEq(jobMetadata.status, 1);
    }

    function test_JobManager_CancelJobByConsumer() public {
        test_Consumer_RequestJob();
        vm.expectEmit(true, false, false, false);
        emit JobCancelled(DEFAULT_JOB_ID);
        vm.prank(address(consumer));
        jobManager.cancelJob(DEFAULT_JOB_ID);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        assertEq(jobMetadata.status, 2);
    }

    function test_JobManager_CancelJobByOwner() public {
        test_Consumer_RequestJob();
        vm.expectEmit(true, false, false, false);
        emit JobCancelled(DEFAULT_JOB_ID);
        vm.prank(jobManager.owner());
        jobManager.cancelJob(DEFAULT_JOB_ID);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        assertEq(jobMetadata.status, 2);
    }

    function testRevertWhen_JobManager_CancelJobUnauthorized() public {
        test_JobManager_CreateJob();
        vm.prank(address(1));
        vm.expectRevert("JobManager.cancelJob: caller is not the job consumer or JobManager owner");
        jobManager.cancelJob(DEFAULT_JOB_ID);
    }

    function testRevertWhen_JobManager_CancelJobNotPending() public {
        test_Consumer_RequestJob();
        vm.prank(address(consumer));
        jobManager.cancelJob(DEFAULT_JOB_ID);
        vm.prank(address(consumer));
        vm.expectRevert("JobManager.cancelJob: job is not in pending state");
        jobManager.cancelJob(DEFAULT_JOB_ID);
    }

    function test_Consumer_UpdateLatestNonce() public {
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);
        vm.prank(address(jobManager));
        consumer.updateLatestNonce(9);
        assertEq(consumer.getNextNonce(), 10);
    }

    function testRevertWhen_Consumer_UpdateLatestNonceNonceUnauthorized() public {
        vm.expectRevert("Consumer.onlyJobManager: caller is not the job manager");
        consumer.updateLatestNonce(9);
    }

    function testRevertWhen_Consumer_ReceiveResultUnauthorized() public {
        test_Consumer_RequestJob();
        vm.prank(address(1));
        vm.expectRevert("Consumer.onlyJobManager: caller is not the job manager");
        consumer.receiveResult(DEFAULT_JOB_ID, abi.encode(address(0)));
    }

    function test_JobManager_SubmitResult() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs
        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"54c2eee618c1b7cda703ad01ebb2e98fabdb46970e1b5b1eb479330e0c72de8b1996f4cfff81e360695a816afed0f4fd85e60b7225bada8c05b7e72b845b5f741b";

        vm.expectEmit(true, true, false, false);
        emit JobCompleted(DEFAULT_JOB_ID, abi.encode(address(0), 10));
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);

        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        // Check that job status is COMPLETED
        assertEq(jobMetadata.status, 3);

        // Check that state was correctly updated in Consumer contract
        assertEq(consumer.getBalance(address(0)), 10);
        assertEq(consumer.getJobResult(DEFAULT_JOB_ID), abi.encode(address(0), 10));
    }

    function testFailWhen_JobManager_SubmitResultInvalidEncodingOfResultWithMetadata() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory resultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"b3e4536ee1991fec6a009a0df362b8b55a9f2b304d4d94f34a71e81203be3274679ec32fe27c3c7340664bd5c8c7855c8957c371e445b80fe693f381688894fb1c";

        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testFailWhen_JobManager_SubmitResultInvalidEncodingOfResult() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signature = hex"761ca07f09f33cbc0619281e09c15bf562f2fc5fa30a5c2f0dc4fa4f252c0ca87939dc7cedfcb46d2db74c5cd6f0746610df6984e4ec429c1f92cde75b3f0df31c";

        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultUnauthorized() public {
        test_Consumer_RequestJob();
        vm.prank(address(2));
        vm.expectRevert("JobManager.submitResult: caller is not the relayer");
        jobManager.submitResult(abi.encode("resultWithMetadata"), abi.encodePacked("signature"));
    }

    function testRevertWhen_JobManager_SubmitResultInvalidSignature() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000001290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"89db44d83f6d32ff87647d9ac8d468b74ac6afdbc76f4ee7cc9260f93e3e48c9617f4ed3e7088e529a78c481fa9d58affb166dbb388e300e42c3de4e7b54d6091b";

        vm.expectRevert("JobManager.submitResult: Invalid signature");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultCancelledJob() public {
        test_JobManager_CancelJobByConsumer();

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"54c2eee618c1b7cda703ad01ebb2e98fabdb46970e1b5b1eb479330e0c72de8b1996f4cfff81e360695a816afed0f4fd85e60b7225bada8c05b7e72b845b5f741b";

        vm.expectRevert("JobManager.submitResult: job is not in pending state");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongProgramInputHash() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b28c273dc8bd09a0b6f2a1e4d557d16b0026a0c70a998f9557c159fa082683a81500000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d494400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c76000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"5a7825c7110b03c3482a1017881860224b2103d29e194a8f147d6f9f0ae3275e71aced687f2a72d00cb3a6574dfcbe5d7a4c9ff49d172c28c54817f8026406111b";

        vm.expectRevert("JobManager.submitResult: program input signed by coprocessor doesn't match program input submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongProgramID() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000a70726f6772616d4944310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"8a8a4d0d6179c882fdc680e69121f4e45e10d17f1b49ff8b14dc684caa97175144dcd5a45c47c5c95e565fab84c80cbfdcb95fa8cac2b7d683ffe1212da95c1b1c";

        vm.expectRevert("JobManager.submitResult: program ID signed by coprocessor doesn't match program ID submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongMaxCycles() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000017d784000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"0729f6a87e86698f3eaefa4899114a8f69fef91dc6a9f1de19c30d34a84406e4345aeef75b62da8c540e7263ad7e8f790d1daf6f080cc31ee1cc8df6bede8cf51c";

        vm.expectRevert("JobManager.submitResult: max cycles signed by coprocessor doesn't match max cycles submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function test_JobManager_SubmitResultForOffchainJob() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"54c2eee618c1b7cda703ad01ebb2e98fabdb46970e1b5b1eb479330e0c72de8b1996f4cfff81e360695a816afed0f4fd85e60b7225bada8c05b7e72b845b5f741b";

        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);

        vm.expectEmit(true, true, false, false);
        emit JobCompleted(DEFAULT_JOB_ID, abi.encode(address(0), 10));
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(resultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);

        // Check that inputs are stored correctly in Consumer contract
        assertEq(consumer.getProgramInputsForJob(DEFAULT_JOB_ID), abi.encode(address(0)));
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);

        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        // Check that job status is COMPLETED
        assertEq(jobMetadata.status, 3);

        // Check that state was correctly updated in Consumer contract
        assertEq(consumer.getBalance(address(0)), 10);
        assertEq(consumer.getJobResult(DEFAULT_JOB_ID), abi.encode(address(0), 10));
    }

    function testFailWhen_JobManager_SubmitResultForOffchainJobInvalidEncodingOfRequest() public {
        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c76000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"63427b34c5cbd6673dee562772d6e8129d7f6f0857fa32abbec6a787537002e73e5a52f9d79148828e47af4c855c7f870d226fdbcff0d44526d28107c02f92311b";

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"54c2eee618c1b7cda703ad01ebb2e98fabdb46970e1b5b1eb479330e0c72de8b1996f4cfff81e360695a816afed0f4fd85e60b7225bada8c05b7e72b845b5f741b";

        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(resultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobDuplicateNonce() public {
        test_JobManager_SubmitResultForOffchainJob();

        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"54c2eee618c1b7cda703ad01ebb2e98fabdb46970e1b5b1eb479330e0c72de8b1996f4cfff81e360695a816afed0f4fd85e60b7225bada8c05b7e72b845b5f741b";

        vm.expectRevert("JobManager.createJob: job already exists with this nonce and consumer");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(resultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobInvalidSignatureOnRequest() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory invalidSignatureOnRequest = hex"8d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory resultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"b3e4536ee1991fec6a009a0df362b8b55a9f2b304d4d94f34a71e81203be3274679ec32fe27c3c7340664bd5c8c7855c8957c371e445b80fe693f381688894fb1c";

        vm.expectRevert("JobManager.submitResultForOffchainJob: Invalid signature on job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(resultWithMetadata, signatureOnResult, jobRequest, invalidSignatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobInvalidSignatureOnResult() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory resultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory invalidSignatureOnResult = hex"d3e4536ee1991fec6a009a0df362b8b55a9f2b304d4d94f34a71e81203be3274679ec32fe27c3c7340664bd5c8c7855c8957c371e445b80fe693f381688894fb1c";

        vm.expectRevert("JobManager.submitResultForOffchainJob: Invalid signature on result");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(resultWithMetadata, invalidSignatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongProgramInputHash() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d494400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c76";
        bytes memory signatureOnRequest = hex"1b81406ed64090739a57c718d8e835613bcfa0682bac6ff97731c6eabd4f6ef80127a592c35d153e729bd594fbb4f3ce3e49ec6653b22c858242039312ac4ddf1c";

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"54c2eee618c1b7cda703ad01ebb2e98fabdb46970e1b5b1eb479330e0c72de8b1996f4cfff81e360695a816afed0f4fd85e60b7225bada8c05b7e72b845b5f741b";

        vm.expectRevert("JobManager.submitResult: program input signed by coprocessor doesn't match program input submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(resultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongProgramID() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000a70726f6772616d4944320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"fc466bdddc3fda30c417d2b1e0a4942b95ec2b156034d785f12fa7ba18c6c7711369c98e73bd247227a45e15f8bac29d9e2137a5e97a0702ab75ef1e952c8d271c";

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"54c2eee618c1b7cda703ad01ebb2e98fabdb46970e1b5b1eb479330e0c72de8b1996f4cfff81e360695a816afed0f4fd85e60b7225bada8c05b7e72b845b5f741b";

        vm.expectRevert("JobManager.submitResult: program ID signed by coprocessor doesn't match program ID submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(resultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongMaxCycles() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"bed57c493c8dd8077ab203a1c742feadb2e215a46f4bb2973a20047142cb36b77b9a240b955facb7fa972907782fcaba03c10cc21e08ef297ccbce45b8ab9a8d1c";

        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"54c2eee618c1b7cda703ad01ebb2e98fabdb46970e1b5b1eb479330e0c72de8b1996f4cfff81e360695a816afed0f4fd85e60b7225bada8c05b7e72b845b5f741b";

        vm.expectRevert("JobManager.submitResult: max cycles signed by coprocessor doesn't match max cycles submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(resultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongJobID() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory resultWithMetadata = hex"f62d99077913903a7c7cf4449b5327ecf1878cac1dcd22f534a87cf163407262290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"860c12bcaef0e467d0ef6db031715b9ca44e08f9b4bf55262400c8f9d39fb4006c6f8d7955ce11bfe2a977208cb814e32c367a729852cf951d0a69e75d6174861b";

        vm.expectRevert("JobManager.submitResultForOffchainJob: job ID signed by coprocessor doesn't match job ID of job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(resultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }
}


