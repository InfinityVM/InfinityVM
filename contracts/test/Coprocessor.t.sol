// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {JobManager} from "../src/JobManager.sol";
import {Consumer} from "../src/Consumer.sol";
import {MockConsumer} from "./mocks/MockConsumer.sol";
import {CoprocessorDeployer} from "../script/CoprocessorDeployer.s.sol";

contract CoprocessorTest is Test, CoprocessorDeployer {
    uint64 DEFAULT_MAX_CYCLES = 1_000_000;
    address RELAYER = address(1);
    address COPROCESSOR_OPERATOR = 0x184c47137933253f49325B851307Ab1017863BD0;
    address OFFCHAIN_SIGNER = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;
    uint32 DEFAULT_NONCE = 1;
    bytes32 DEFAULT_JOB_ID;

    event JobCreated(bytes32 indexed jobID, uint64 maxCycles, bytes programID, bytes programInput);
    event JobCancelled(bytes32 indexed jobID);
    event JobCompleted(bytes32 indexed jobID, bytes result);

    function setUp() public {
        deployCoprocessorContracts(RELAYER, COPROCESSOR_OPERATOR, OFFCHAIN_SIGNER, 0, false);
        DEFAULT_JOB_ID = keccak256(abi.encodePacked(DEFAULT_NONCE, address(consumer)));
    }

    function test_JobManager_CreateJob() public {
        vm.expectEmit(true, true, true, true);
        emit JobCreated(DEFAULT_JOB_ID, DEFAULT_MAX_CYCLES, "programID", "programInput");
        vm.prank(address(consumer));
        bytes32 jobID = jobManager.createJob(DEFAULT_NONCE, "programID", "programInput", DEFAULT_MAX_CYCLES);
        assertEq(jobID, DEFAULT_JOB_ID);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(jobID);
        assertEq(jobMetadata.programID, "programID");
        assertEq(jobMetadata.maxCycles, DEFAULT_MAX_CYCLES);
        assertEq(jobMetadata.caller, address(consumer));
        assertEq(jobMetadata.status, 1);
    }

    function test_Consumer_RequestJob() public {
        vm.expectEmit(true, true, true, true);
        emit JobCreated(DEFAULT_JOB_ID, DEFAULT_MAX_CYCLES, "programID", abi.encode(address(0)));
        bytes32 jobID = consumer.requestBalance("programID", address(0));
        assertEq(jobID, DEFAULT_JOB_ID);
        assertEq(consumer.getProgramInputsForJob(jobID), abi.encode(address(0)));
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(jobID);
        assertEq(jobMetadata.programID, "programID");
        assertEq(jobMetadata.maxCycles, DEFAULT_MAX_CYCLES);
        assertEq(jobMetadata.caller, address(consumer));
        assertEq(jobMetadata.status, 1);
    }

    function test_JobManager_CancelJobByConsumer() public {
        test_Consumer_RequestJob();
        vm.expectEmit(true, false, false, false);
        emit JobCancelled(DEFAULT_JOB_ID);
        vm.prank(address(consumer));
        jobManager.cancelJob(DEFAULT_JOB_ID);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        assertEq(jobMetadata.status, 2);
    }

    function test_JobManager_CancelJobByOwner() public {
        test_Consumer_RequestJob();
        vm.expectEmit(true, false, false, false);
        emit JobCancelled(DEFAULT_JOB_ID);
        vm.prank(jobManager.owner());
        jobManager.cancelJob(DEFAULT_JOB_ID);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        assertEq(jobMetadata.status, 2);
    }

    function testRevertWhen_JobManager_CancelJobUnauthorized() public {
        test_JobManager_CreateJob();
        vm.prank(address(1));
        vm.expectRevert("JobManager.cancelJob: caller is not the job creator or JobManager owner");
        jobManager.cancelJob(DEFAULT_JOB_ID);
    }

    function testRevertWhen_JobManager_CancelJobNotPending() public {
        test_Consumer_RequestJob();
        vm.prank(address(consumer));
        jobManager.cancelJob(DEFAULT_JOB_ID);
        vm.prank(address(consumer));
        vm.expectRevert("JobManager.cancelJob: job is not in pending state");
        jobManager.cancelJob(DEFAULT_JOB_ID);
    }

    function testRevertWhen_Consumer_ReceiveResultUnauthorized() public {
        test_Consumer_RequestJob();
        vm.prank(address(1));
        vm.expectRevert("Consumer.onlyJobManager: caller is not the job manager");
        consumer.receiveResult(DEFAULT_JOB_ID, abi.encode(address(0)));
    }

    function test_JobManager_SubmitResult() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs
        bytes memory resultWithMetadata = hex"887f82ce61788684ad22464d8c0b144f2fad744b01f80ecfceaa3770026bad35290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"a263696a97100b976e733a8c59bd47b931bcbcf8da7da253283bc55f2daef16941ee62e6c4c4c1a2f1879c8adcdbe159423b467c2b5ecbdf23c00900593e99a11b";

        vm.expectEmit(true, true, false, false);
        emit JobCompleted(DEFAULT_JOB_ID, abi.encode(address(0), 10));
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);

        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        // Check that job status is COMPLETED
        assertEq(jobMetadata.status, 3);

        // Check that state was correctly updated in Consumer contract
        assertEq(consumer.getBalance(address(0)), 10);
        assertEq(consumer.getJobResult(DEFAULT_JOB_ID), abi.encode(address(0), 10));
    }

    function testFailWhen_JobManager_SubmitResultInvalidEncodingOfResultWithMetadata() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory resultWithMetadata = hex"887f82ce61788684ad22464d8c0b144f2fad744b01f80ecfceaa3770026bad3500000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"6a9fc082e2f238f94fc8768f2eb691d8ac3ecc5f6d417381ad31708ebd452b5662b7417d0ae9fb3daeeeb30c8dbbf7559f5f035fffe02b55e2ab1b337e8691cc1b";

        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testFailWhen_JobManager_SubmitResultInvalidEncodingOfResult() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory resultWithMetadata = hex"887f82ce61788684ad22464d8c0b144f2fad744b01f80ecfceaa3770026bad35290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signature = hex"153f1ddd4594f07d65fcdf7dff81a52b6e0cf71484d634f72328fb291df546021d90ed95ff47680e24967252c88ce480220ee7db9b456ccbfbe870fa4051c0e81c";

        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultUnauthorized() public {
        test_Consumer_RequestJob();
        vm.prank(address(2));
        vm.expectRevert("JobManager.submitResult: caller is not the relayer");
        jobManager.submitResult(abi.encode("resultWithMetadata"), abi.encodePacked("signature"));
    }

    function testRevertWhen_JobManager_SubmitResultInvalidSignature() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000001290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"89db44d83f6d32ff87647d9ac8d468b74ac6afdbc76f4ee7cc9260f93e3e48c9617f4ed3e7088e529a78c481fa9d58affb166dbb388e300e42c3de4e7b54d6091b";

        vm.expectRevert("JobManager.submitResult: Invalid signature");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultCancelledJob() public {
        test_JobManager_CancelJobByConsumer();

        bytes memory resultWithMetadata = hex"887f82ce61788684ad22464d8c0b144f2fad744b01f80ecfceaa3770026bad35290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"a263696a97100b976e733a8c59bd47b931bcbcf8da7da253283bc55f2daef16941ee62e6c4c4c1a2f1879c8adcdbe159423b467c2b5ecbdf23c00900593e99a11b";

        vm.expectRevert("JobManager.submitResult: job is not in pending state");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongProgramInputHash() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"887f82ce61788684ad22464d8c0b144f2fad744b01f80ecfceaa3770026bad355fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd200000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"8e1ae5b0a8692586bb1649607274069ed53dc3a81d50272db7ed4fa0b338e67136765f6a89fe633b55bef57366a85207913a2d57fc445d9c88b29bb9e10fb30a1c";

        vm.expectRevert("JobManager.submitResult: program input signed by coprocessor doesn't match program input submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongProgramID() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"887f82ce61788684ad22464d8c0b144f2fad744b01f80ecfceaa3770026bad35290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000a70726f6772616d4944320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"b3bbb8823a9e4be1f1ea17a887bdb10db753d2e9f5d2bb84fade050ed55d08bf63eb976690b3fbc6539e023304960f96faf7b1105d719ba6a0afd5d5c481747d1b";

        vm.expectRevert("JobManager.submitResult: program ID signed by coprocessor doesn't match program ID submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongMaxCycles() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"887f82ce61788684ad22464d8c0b144f2fad744b01f80ecfceaa3770026bad35290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"184ba01ab9a62f30e5690424220e04385115942f6d9fa1d72d58fa1c0bbcfc2c0b8722c6864d9d7fd8843272d5d3d73542887fcaf79184ca4b3a09a0869fd7351c";

        vm.expectRevert("JobManager.submitResult: max cycles signed by coprocessor doesn't match max cycles submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function test_JobManager_SubmitResultForOffchainJob() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory offchainResultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"b3e4536ee1991fec6a009a0df362b8b55a9f2b304d4d94f34a71e81203be3274679ec32fe27c3c7340664bd5c8c7855c8957c371e445b80fe693f381688894fb1c";

        vm.expectEmit(true, true, false, false);
        emit JobCompleted(DEFAULT_JOB_ID, abi.encode(address(0), 10));
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);

        // Check that inputs are stored correctly in Consumer contract
        assertEq(consumer.getProgramInputsForJob(DEFAULT_JOB_ID), abi.encode(address(0)));

        // // Check that nonce-related data is stored correctly in JobManager contract
        // assertEq(jobManager.getJobIDForNonce(DEFAULT_JOB_ID, address(consumer)), 1);
        // assertEq(jobManager.getMaxNonce(address(consumer)), 1);

        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        // Check that job status is COMPLETED
        assertEq(jobMetadata.status, 3);

        // Check that state was correctly updated in Consumer contract
        assertEq(consumer.getBalance(address(0)), 10);
        assertEq(consumer.getJobResult(DEFAULT_JOB_ID), abi.encode(address(0), 10));
    }

    function testFailWhen_JobManager_SubmitResultForOffchainJobInvalidEncodingOfRequest() public {
        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c76000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"63427b34c5cbd6673dee562772d6e8129d7f6f0857fa32abbec6a787537002e73e5a52f9d79148828e47af4c855c7f870d226fdbcff0d44526d28107c02f92311b";

        bytes memory offchainResultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"b3e4536ee1991fec6a009a0df362b8b55a9f2b304d4d94f34a71e81203be3274679ec32fe27c3c7340664bd5c8c7855c8957c371e445b80fe693f381688894fb1c";

        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobDuplicateNonce() public {
        test_JobManager_SubmitResultForOffchainJob();

        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory offchainResultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"b3e4536ee1991fec6a009a0df362b8b55a9f2b304d4d94f34a71e81203be3274679ec32fe27c3c7340664bd5c8c7855c8957c371e445b80fe693f381688894fb1c";

        vm.expectRevert("JobManager.createJob: job already exists with this nonce and consumer");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobInvalidSignatureOnRequest() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory invalidSignatureOnRequest = hex"8d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory offchainResultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"b3e4536ee1991fec6a009a0df362b8b55a9f2b304d4d94f34a71e81203be3274679ec32fe27c3c7340664bd5c8c7855c8957c371e445b80fe693f381688894fb1c";

        vm.expectRevert("JobManager.submitResultForOffchainJob: Invalid signature on job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, invalidSignatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobInvalidSignatureOnResult() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory offchainResultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory invalidSignatureOnResult = hex"d3e4536ee1991fec6a009a0df362b8b55a9f2b304d4d94f34a71e81203be3274679ec32fe27c3c7340664bd5c8c7855c8957c371e445b80fe693f381688894fb1c";

        vm.expectRevert("JobManager.submitResultForOffchainJob: Invalid signature on result");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, invalidSignatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongProgramInputHash() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory offchainResultWithMetadata = hex"510e4e770828ddbf7f7b00ab00a9f6adaf81c0dc9cc85f1f8249c256942d61d900000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"cd48f2626c2882d4a2ad41c4ede41388e1ec1eb0d25df112b6b66e5df6a58df235622fabf3cab240326a173570699b60eb94cb3b4337d4d19e73729b501d7a861c";

        vm.expectRevert("JobManager.submitResult: program input signed by coprocessor doesn't match program input submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongProgramID() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory offchainResultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a70726f6772616d4944350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"15a3439fd56c9e17918c96b19f0eed91c62c77c4aed3f01f0ad8b399ef8db3c060d864fa1d085bc91b17d4ebba1df7c2c36bd5e84b097378caf00a701bd4ace21b";

        vm.expectRevert("JobManager.submitResult: program ID signed by coprocessor doesn't match program ID submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongMaxCycles() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"9d082fb40fa6afaa0da743eb5b17a0efe5b7a53fb152615fc7740625a26770296c1896427379cfe894bad3b6662edb440323b4b7835beaa9e647360e055dbdac1b";

        bytes memory offchainResultWithMetadata = hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630000000000000000000000000000000000000000000000000000000005f5f488000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"bcba3754f00b5c44e8cef2ed4cdc93c63ebbc42d6a019405714c0328c131324b303733e51bf3c7286be2177f0aeba68b1e43b3298e569fb00097924158c0ca531b";

        vm.expectRevert("JobManager.submitResult: max cycles signed by coprocessor doesn't match max cycles submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }
}


