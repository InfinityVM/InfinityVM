// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {JobManager} from "../src/coprocessor/JobManager.sol";
import {Consumer} from "../src/coprocessor/Consumer.sol";
import {MockConsumer} from "./mocks/MockConsumer.sol";
import {CoprocessorDeployer} from "../script/CoprocessorDeployer.s.sol";
import {MockConsumerDeployer} from "../script/MockConsumerDeployer.s.sol";

contract CoprocessorTest is Test, MockConsumerDeployer, CoprocessorDeployer {
    uint64 DEFAULT_MAX_CYCLES = 1_000_000;
    address RELAYER = address(1);
    address COPROCESSOR_OPERATOR = 0x184c47137933253f49325B851307Ab1017863BD0;
    address OFFCHAIN_SIGNER = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;
    uint64 DEFAULT_NONCE = 1;
    bytes32 DEFAULT_JOB_ID;

    event JobCreated(bytes32 indexed jobID, uint64 indexed nonce, address indexed consumer, uint64 maxCycles, bytes programID, bytes onchainInput);
    event JobCancelled(bytes32 indexed jobID);
    event JobCompleted(bytes32 indexed jobID, bytes result);

    function setUp() public {
        uint64 initialMaxNonce = 0;
        deployCoprocessorContracts(RELAYER, COPROCESSOR_OPERATOR, true);
        deployMockConsumerContracts(OFFCHAIN_SIGNER, initialMaxNonce, false);
        DEFAULT_JOB_ID = keccak256(abi.encodePacked(DEFAULT_NONCE, address(consumer)));
    }

    function test_JobManager_CreateJob() public {
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);
        vm.expectEmit(true, true, true, true);
        emit JobCreated(DEFAULT_JOB_ID, DEFAULT_NONCE, address(consumer), DEFAULT_MAX_CYCLES, "programID", "onchainInput");
        vm.prank(address(consumer));
        bytes32 jobID = jobManager.createJob(DEFAULT_NONCE, "programID", "onchainInput", DEFAULT_MAX_CYCLES);
        assertEq(jobID, DEFAULT_JOB_ID);
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(jobID);
        assertEq(jobMetadata.programID, "programID");
        assertEq(jobMetadata.maxCycles, DEFAULT_MAX_CYCLES);
        assertEq(jobMetadata.consumer, address(consumer));
        assertEq(jobMetadata.status, 1);
    }

    function test_Consumer_RequestJob() public {
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);
        vm.expectEmit(true, true, true, true);
        emit JobCreated(DEFAULT_JOB_ID, DEFAULT_NONCE, address(consumer), DEFAULT_MAX_CYCLES, "programID", abi.encode(address(0)));
        bytes32 jobID = consumer.requestBalance("programID", address(0));
        assertEq(jobID, DEFAULT_JOB_ID);
        assertEq(consumer.getOnchainInputForJob(jobID), abi.encode(address(0)));
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(jobID);
        assertEq(jobMetadata.programID, "programID");
        assertEq(jobMetadata.maxCycles, DEFAULT_MAX_CYCLES);
        assertEq(jobMetadata.consumer, address(consumer));
        assertEq(jobMetadata.status, 1);
    }

    function test_JobManager_CancelJobByConsumer() public {
        test_Consumer_RequestJob();
        vm.expectEmit(true, false, false, false);
        emit JobCancelled(DEFAULT_JOB_ID);
        vm.prank(address(consumer));
        jobManager.cancelJob(DEFAULT_JOB_ID);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        assertEq(jobMetadata.status, 2);
    }

    function test_JobManager_CancelJobByOwner() public {
        test_Consumer_RequestJob();
        vm.expectEmit(true, false, false, false);
        emit JobCancelled(DEFAULT_JOB_ID);
        vm.prank(jobManager.owner());
        jobManager.cancelJob(DEFAULT_JOB_ID);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        assertEq(jobMetadata.status, 2);
    }

    function testRevertWhen_JobManager_CancelJobUnauthorized() public {
        test_JobManager_CreateJob();
        vm.prank(address(1));
        vm.expectRevert("JobManager.cancelJob: caller is not the job consumer or JobManager owner");
        jobManager.cancelJob(DEFAULT_JOB_ID);
    }

    function testRevertWhen_JobManager_CancelJobNotPending() public {
        test_Consumer_RequestJob();
        vm.prank(address(consumer));
        jobManager.cancelJob(DEFAULT_JOB_ID);
        vm.prank(address(consumer));
        vm.expectRevert("JobManager.cancelJob: job is not in pending state");
        jobManager.cancelJob(DEFAULT_JOB_ID);
    }

    function test_Consumer_UpdateLatestNonce() public {
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);
        vm.prank(address(jobManager));
        consumer.updateLatestNonce(9);
        assertEq(consumer.getNextNonce(), 10);
    }

    function testRevertWhen_Consumer_UpdateLatestNonceNonceUnauthorized() public {
        vm.expectRevert("Consumer.onlyJobManager: caller is not the job manager");
        consumer.updateLatestNonce(9);
    }

    function testRevertWhen_Consumer_ReceiveResultUnauthorized() public {
        test_Consumer_RequestJob();
        vm.prank(address(1));
        vm.expectRevert("Consumer.onlyJobManager: caller is not the job manager");
        consumer.receiveResult(DEFAULT_JOB_ID, abi.encode(address(0)));
    }

    function test_JobManager_SubmitResult() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs
        bytes memory resultWithMetadata = hex"000000000000000000000000000000000000000000000000000000000000002060bd454a5be1144057d7b68260c9414afce2ca215f6a84a26a65329343a1220c290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"c6ebed40338321cab7eec07b9b9d337ff4e9347d531bff36e2a3197bebb86e2e69e4cefcdc6171556882971d4f448133fa6e3bfbcc1e7d0bae227214ed4a52a71c";

        vm.expectEmit(true, true, false, false);
        emit JobCompleted(DEFAULT_JOB_ID, abi.encode(address(0), 10));
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);

        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        // Check that job status is COMPLETED
        assertEq(jobMetadata.status, 3);

        // Check that state was correctly updated in Consumer contract
        assertEq(consumer.getBalance(address(0)), 10);
        assertEq(consumer.getJobResult(DEFAULT_JOB_ID), abi.encode(address(0), 10));
    }

    function testFailWhen_JobManager_SubmitResultInvalidEncodingOfResultWithMetadata() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory resultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"eb78cf205da110716882784d3cc7fd0e6fb504f295591b6a8a678f385275b9fc29d0f79daef111868115f91026ec8074f2dc29d9e96d0fafb6a21b2cd079d31b1b";

        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testFailWhen_JobManager_SubmitResultInvalidEncodingOfResult() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signature = hex"761ca07f09f33cbc0619281e09c15bf562f2fc5fa30a5c2f0dc4fa4f252c0ca87939dc7cedfcb46d2db74c5cd6f0746610df6984e4ec429c1f92cde75b3f0df31c";

        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultUnauthorized() public {
        test_Consumer_RequestJob();
        vm.prank(address(2));
        vm.expectRevert("JobManager.submitResult: caller is not the relayer");
        jobManager.submitResult(abi.encode("resultWithMetadata"), abi.encodePacked("signature"));
    }

    function testRevertWhen_JobManager_SubmitResultInvalidSignature() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"000000000000000000000000000000000000000000000000000000000000002060bd454a5be1144057d7b68260c9414afce2ca215f6a84a26a65329343a1220c290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"89db44d83f6d32ff87647d9ac8d468b74ac6afdbc76f4ee7cc9260f93e3e48c9617f4ed3e7088e529a78c481fa9d58affb166dbb388e300e42c3de4e7b54d6091b";

        vm.expectRevert("JobManager.submitResult: Invalid signature");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultCancelledJob() public {
        test_JobManager_CancelJobByConsumer();

        bytes memory resultWithMetadata = hex"000000000000000000000000000000000000000000000000000000000000002060bd454a5be1144057d7b68260c9414afce2ca215f6a84a26a65329343a1220c290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"c6ebed40338321cab7eec07b9b9d337ff4e9347d531bff36e2a3197bebb86e2e69e4cefcdc6171556882971d4f448133fa6e3bfbcc1e7d0bae227214ed4a52a71c";

        vm.expectRevert("JobManager.submitResult: job is not in pending state");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongOnchainInputHash() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"000000000000000000000000000000000000000000000000000000000000002060bd454a5be1144057d7b68260c9414afce2ca215f6a84a26a65329343a1220c95e9e575fbc0bc6fe3cbe544fef64067247ea96dfa586de47992e340a8aff92600000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"8fca9e5765a5ef819cb0c142a2c9dc0d5ebea5c366022dfee78090c28873cc5d1dae8d9bf6876110850f7affb71ca91d42143d72a26055df9f4469b7a130817b1c";

        vm.expectRevert("JobManager.submitResult: onchain input signed by coprocessor doesn't match onchain input submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongProgramID() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"000000000000000000000000000000000000000000000000000000000000002060bd454a5be1144057d7b68260c9414afce2ca215f6a84a26a65329343a1220c290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000a70726f6772616d4944320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"d5861a905eeba3e3ae5d98e2d889673de57c6f885e7293ce96c5c6d42ea1430e4bcefe4e6999683046edc1dd13dc8bf72ef776d2395da94785b11fadfcfac2801b";

        vm.expectRevert("JobManager.submitResult: program ID signed by coprocessor doesn't match program ID submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongMaxCycles() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"000000000000000000000000000000000000000000000000000000000000002060bd454a5be1144057d7b68260c9414afce2ca215f6a84a26a65329343a1220c290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"eedb477207bf4c71a7b71343c8f84bdbd8a888e6f14092847600bd4ff62a152e063e8533d5923dcb9fb2fad010aa6b46114ed362fd008a0e76525458054793a01c";

        vm.expectRevert("JobManager.submitResult: max cycles signed by coprocessor doesn't match max cycles submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function test_JobManager_SubmitResultForOffchainJob() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f424000000000000000000000000050eef481cae4250d252ae577a09bf514f224c6c400000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"ebed44f7299bd0dba5e4622207ebec36ca16106074f403cb65b18c6242e60fd3043703f26051243f128bb2a6a1ca3d90e7916c216b6438c997a3c146776192351b";

        bytes memory offchainResultWithMetadata = hex"000000000000000000000000000000000000000000000000000000000000002060bd454a5be1144057d7b68260c9414afce2ca215f6a84a26a65329343a1220c290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001013cd603a0a8f86f16c198e286904a937854130beb18b5e400d103f28aa4b36e";
        bytes memory signatureOnResult = hex"a3822527ac0bb5315ac1481478334e8738f9fb82acff941b754c0bcecbb981d60b9a71d3b56999326fe572eccef054ab93efba30e83f161f2e04fa9d8dd078241c";

        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);

        vm.expectEmit(true, true, false, false);
        emit JobCompleted(DEFAULT_JOB_ID, abi.encode(address(0), 10));
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);

        // Check that inputs are stored correctly in Consumer contract
        assertEq(consumer.getOnchainInputForJob(DEFAULT_JOB_ID), abi.encode(address(0)));
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);

        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        // Check that job status is COMPLETED
        assertEq(jobMetadata.status, 3);

        // Check that state was correctly updated in Consumer contract
        assertEq(consumer.getBalance(address(0)), 10);
        assertEq(consumer.getJobResult(DEFAULT_JOB_ID), abi.encode(address(0), 10));
    }

    function testFailWhen_JobManager_SubmitResultForOffchainJobInvalidEncodingOfRequest() public {
        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c76000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"63427b34c5cbd6673dee562772d6e8129d7f6f0857fa32abbec6a787537002e73e5a52f9d79148828e47af4c855c7f870d226fdbcff0d44526d28107c02f92311b";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"3e6bbc4fa7b727191be2e24303d901f0dea5dbbda344a99fd39b19189dd584ab5b44e2e0d42f201fed4f1bccd3ff9691373d843001443f265bbde70f4ca3d7ef1b";

        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobDuplicateNonce() public {
        test_JobManager_SubmitResultForOffchainJob();

        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f0fe40f7635b3c07d4b1660cdc1c848aedf9262ba5d5e1e2097e6f35f3baae957b9b3753e73bbbd16e7d03c943460f175edabd44523b06082aaae51e6206bf081b";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020bea38cd93b941138113d01787eb0c64912d8b36298d0468b2935610d393bca0a290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnResult = hex"1fa3d6c75011ffe144659e453f4ea49e404325ab9da28afd21f520d91c1ac7271ae88eefffb881d261aaa0917d315e02847c0abb17859e7da3925d3b93c53e5c1b";

        vm.expectRevert("JobManager.createJob: job already exists with this nonce and consumer");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobInvalidSignatureOnRequest() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory invalidSignatureOnRequest = hex"f0fe50f7635b3c07d4b1660cdc1c848aedf9262ba5d5e1e2097e6f35f3baae957b9b3753e73bbbd16e7d03c943460f175edabd44523b06082aaae51e6206bf081b";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020bea38cd93b941138113d01787eb0c64912d8b36298d0468b2935610d393bca0a290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnResult = hex"1fa3d6c75011ffe144659e453f4ea49e404325ab9da28afd21f520d91c1ac7271ae88eefffb881d261aaa0917d315e02847c0abb17859e7da3925d3b93c53e5c1b";

        vm.expectRevert("JobManager.submitResultForOffchainJob: Invalid signature on job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, invalidSignatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobInvalidSignatureOnResult() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f0fe40f7635b3c07d4b1660cdc1c848aedf9262ba5d5e1e2097e6f35f3baae957b9b3753e73bbbd16e7d03c943460f175edabd44523b06082aaae51e6206bf081b";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020bea38cd93b941138113d01787eb0c64912d8b36298d0468b2935610d393bca0a290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000";
        bytes memory invalidSignatureOnResult = hex"1fa3d6c75011ffe145659e453f4ea49e404325ab9da28afd21f520d91c1ac7271ae88eefffb881d261aaa0917d315e02847c0abb17859e7da3925d3b93c53e5c1b";

        vm.expectRevert("JobManager.submitResultForOffchainJob: Invalid signature on result");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, invalidSignatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongOnchainInputHash() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f0fe40f7635b3c07d4b1660cdc1c848aedf9262ba5d5e1e2097e6f35f3baae957b9b3753e73bbbd16e7d03c943460f175edabd44523b06082aaae51e6206bf081b";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020bea38cd93b941138113d01787eb0c64912d8b36298d0468b2935610d393bca0ac5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnResult = hex"3cb83228fea74d423df96a0280405e4d281e3e69a3d0d2dbcb42182480e9698b7515a8927fbcba72ea93e0ec36a220d07ec7dc18ccbf265798196fac40356caf1b";

        vm.expectRevert("JobManager.submitResult: onchain input signed by coprocessor doesn't match onchain input submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongOffchainInputHash() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f0fe40f7635b3c07d4b1660cdc1c848aedf9262ba5d5e1e2097e6f35f3baae957b9b3753e73bbbd16e7d03c943460f175edabd44523b06082aaae51e6206bf081b";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020bea38cd93b941138113d01787eb0c64912d8b36298d0468b2935610d393bca0a290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnResult = hex"b6a5aee33bfe328c44cad72c14393bd01924eb9d478061bba5c5460a86910596686c9063905bd543cf65219d8e5f2e7df1246b8b48e3757a269897692857313d1c";

        vm.expectRevert("JobManager.submitResultForOffchainJob: offchain input hash signed by coprocessor doesn't match offchain input hash of job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongProgramID() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f0fe40f7635b3c07d4b1660cdc1c848aedf9262ba5d5e1e2097e6f35f3baae957b9b3753e73bbbd16e7d03c943460f175edabd44523b06082aaae51e6206bf081b";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020bea38cd93b941138113d01787eb0c64912d8b36298d0468b2935610d393bca0a290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000a70726f6772616d6944350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnResult = hex"a41691e9336c076ad0465aad7168a24abf9057689d2f15a17983922e2ae06a23474eb52eb8b257c1355631a1e5e47dc2f0f6b5aa7219be6f4ffcbc76f3e8accb1b";

        vm.expectRevert("JobManager.submitResult: program ID signed by coprocessor doesn't match program ID submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongMaxCycles() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f0fe40f7635b3c07d4b1660cdc1c848aedf9262ba5d5e1e2097e6f35f3baae957b9b3753e73bbbd16e7d03c943460f175edabd44523b06082aaae51e6206bf081b";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020bea38cd93b941138113d01787eb0c64912d8b36298d0468b2935610d393bca0a290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnResult = hex"e5a4ed797321bd181131850e122b4d7fe0221a8b4f78d15c140388e7372dfad14ae5fc993d0c9c6affcdfc7a054c9d8d16e34c8c1be484b2f7468f1eed71eeee1b";

        vm.expectRevert("JobManager.submitResult: max cycles signed by coprocessor doesn't match max cycles submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongJobID() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f0fe40f7635b3c07d4b1660cdc1c848aedf9262ba5d5e1e2097e6f35f3baae957b9b3753e73bbbd16e7d03c943460f175edabd44523b06082aaae51e6206bf081b";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020a420241a2a1ea105b8428caaf452e0e05529c1896b1421123e1526d771e505ae290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnResult = hex"f5466679d8c606c25acd843f5affb1711be92314db12422b0424b50e15d1f6d42b75072e546aa509e29efa9e7643d6234a4e9d933bcee071eef099e198f6e7e41b";

        vm.expectRevert("JobManager.submitResultForOffchainJob: job ID signed by coprocessor doesn't match job ID of job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }

    function test_JobManager_SubmitOffchainJobWithBlobs() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"92e454224c4cbbd0e7d335b5024c48e1f02057586585f74446e8900ce3474c0f2f16a6fa31b3738b37efe139f7055625b4c024b06ba03558d070a026d78ff56b1c";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020bea38cd93b941138113d01787eb0c64912d8b36298d0468b2935610d393bca0a290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001013cd603a0a8f86f16c198e286904a937854130beb18b5e400d103f28aa4b36e";
        bytes memory signatureOnResult = hex"1a185bb8763e0802ead85dca7d554cf09b2450a3dc3f478f20c06ab9fe3bfd573200b378189d18213529eccbc8de3adae09081db6101635180eb4fccbdf1ba8c1b";

        bytes32 aBlobHash = hex"013cd603a0a8f86f16c198e286904a937854130beb18b5e400d103f28aa4b36e";
        bytes32[] memory blobHashes = new bytes32[](1);
        blobHashes[0] = aBlobHash;
        // vm.blobhashes(hashes); introduced in https://github.com/foundry-rs/foundry/pull/7001
        // https://github.com/foundry-rs/foundry/pull/7001/files#diff-562229c390a129629d8716616f5c7657e1f3616e0bbc854b019d1a1083d18157
        vm.blobhashes(blobHashes);

        vm.expectEmit(true, true, false, false);
        emit JobCompleted(DEFAULT_JOB_ID, abi.encode(address(0), 10));
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    
        // Check that inputs are stored correctly in Consumer contract
        assertEq(consumer.getOnchainInputForJob(DEFAULT_JOB_ID), abi.encode(address(0)));
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);

        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        // Check that job status is COMPLETED
        assertEq(jobMetadata.status, 3);

        // Check that state was correctly updated in Consumer contract
        assertEq(consumer.getBalance(address(0)), 10);
        assertEq(consumer.getJobResult(DEFAULT_JOB_ID), abi.encode(address(0), 10));
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongBlobHash() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bb2180ebd78ce97360503434ed37fcf4a1df61c300000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"92e454224c4cbbd0e7d335b5024c48e1f02057586585f74446e8900ce3474c0f2f16a6fa31b3738b37efe139f7055625b4c024b06ba03558d070a026d78ff56b1c";

        bytes memory offchainResultWithMetadata = hex"0000000000000000000000000000000000000000000000000000000000000020bea38cd93b941138113d01787eb0c64912d8b36298d0468b2935610d393bca0a290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001013cd603a0a8f86f16c198e286904a937854130beb18b5e400d103f28aa4b36e";
        bytes memory signatureOnResult = hex"1a185bb8763e0802ead85dca7d554cf09b2450a3dc3f478f20c06ab9fe3bfd573200b378189d18213529eccbc8de3adae09081db6101635180eb4fccbdf1ba8c1b";

        // This blob hash does not match the one in the offchain result
        bytes32 aBlobHash = hex"015cd603a0a8f86f16c198e286904a937854130beb18b5e400d103f28aa4b36e";
        bytes32[] memory blobHashes = new bytes32[](1);
        blobHashes[0] = aBlobHash;
        // vm.blobhashes(hashes); introduced in https://github.com/foundry-rs/foundry/pull/7001
        // https://github.com/foundry-rs/foundry/pull/7001/files#diff-562229c390a129629d8716616f5c7657e1f3616e0bbc854b019d1a1083d18157
        vm.blobhashes(blobHashes);

        vm.expectRevert("JobManager.submitResultForOffchainJob: given blob hash does not match");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest);
    }
}
