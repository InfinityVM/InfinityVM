// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {JobManager} from "../src/coprocessor/JobManager.sol";
import {Consumer} from "../src/coprocessor/Consumer.sol";
import {MockConsumer} from "./mocks/MockConsumer.sol";
import {CoprocessorDeployer} from "../script/CoprocessorDeployer.s.sol";
import {MockConsumerDeployer} from "../script/MockConsumerDeployer.s.sol";

contract CoprocessorTest is Test, MockConsumerDeployer, CoprocessorDeployer {
    uint64 DEFAULT_MAX_CYCLES = 1_000_000;
    address RELAYER = address(1);
    address COPROCESSOR_OPERATOR = 0x184c47137933253f49325B851307Ab1017863BD0;
    address OFFCHAIN_SIGNER = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;
    uint64 DEFAULT_NONCE = 1;
    bytes32 DEFAULT_JOB_ID;

    event JobCreated(bytes32 indexed jobID, uint64 indexed nonce, address indexed consumer, uint64 maxCycles, bytes programID, bytes onchainInput);
    event JobCancelled(bytes32 indexed jobID);
    event JobCompleted(bytes32 indexed jobID, bytes result);

    function setUp() public {
        uint64 initialMaxNonce = 0;
        deployCoprocessorContracts(RELAYER, COPROCESSOR_OPERATOR, true);
        deployMockConsumerContracts(OFFCHAIN_SIGNER, initialMaxNonce, false);
        DEFAULT_JOB_ID = keccak256(abi.encodePacked(DEFAULT_NONCE, address(consumer)));
    }

    function test_JobManager_CreateJob() public {
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);
        vm.expectEmit(true, true, true, true);
        emit JobCreated(DEFAULT_JOB_ID, DEFAULT_NONCE, address(consumer), DEFAULT_MAX_CYCLES, "programID", "onchainInput");
        vm.prank(address(consumer));
        bytes32 jobID = jobManager.createJob(DEFAULT_NONCE, "programID", "onchainInput", DEFAULT_MAX_CYCLES);
        assertEq(jobID, DEFAULT_JOB_ID);
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(jobID);
        assertEq(jobMetadata.programID, "programID");
        assertEq(jobMetadata.maxCycles, DEFAULT_MAX_CYCLES);
        assertEq(jobMetadata.consumer, address(consumer));
        assertEq(jobMetadata.status, 1);
    }

    function test_Consumer_RequestJob() public {
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);
        vm.expectEmit(true, true, true, true);
        emit JobCreated(DEFAULT_JOB_ID, DEFAULT_NONCE, address(consumer), DEFAULT_MAX_CYCLES, "programID", abi.encode(address(0)));
        bytes32 jobID = consumer.requestBalance("programID", address(0));
        assertEq(jobID, DEFAULT_JOB_ID);
        assertEq(consumer.getOnchainInputForJob(jobID), abi.encode(address(0)));
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(jobID);
        assertEq(jobMetadata.programID, "programID");
        assertEq(jobMetadata.maxCycles, DEFAULT_MAX_CYCLES);
        assertEq(jobMetadata.consumer, address(consumer));
        assertEq(jobMetadata.status, 1);
    }

    function test_JobManager_CancelJobByConsumer() public {
        test_Consumer_RequestJob();
        vm.expectEmit(true, false, false, false);
        emit JobCancelled(DEFAULT_JOB_ID);
        vm.prank(address(consumer));
        jobManager.cancelJob(DEFAULT_JOB_ID);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        assertEq(jobMetadata.status, 2);
    }

    function test_JobManager_CancelJobByOwner() public {
        test_Consumer_RequestJob();
        vm.expectEmit(true, false, false, false);
        emit JobCancelled(DEFAULT_JOB_ID);
        vm.prank(jobManager.owner());
        jobManager.cancelJob(DEFAULT_JOB_ID);
        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        assertEq(jobMetadata.status, 2);
    }

    function testRevertWhen_JobManager_CancelJobUnauthorized() public {
        test_JobManager_CreateJob();
        vm.prank(address(1));
        vm.expectRevert("JobManager.cancelJob: caller is not the job consumer or JobManager owner");
        jobManager.cancelJob(DEFAULT_JOB_ID);
    }

    function testRevertWhen_JobManager_CancelJobNotPending() public {
        test_Consumer_RequestJob();
        vm.prank(address(consumer));
        jobManager.cancelJob(DEFAULT_JOB_ID);
        vm.prank(address(consumer));
        vm.expectRevert("JobManager.cancelJob: job is not in pending state");
        jobManager.cancelJob(DEFAULT_JOB_ID);
    }

    function test_Consumer_UpdateLatestNonce() public {
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);
        vm.prank(address(jobManager));
        consumer.updateLatestNonce(9);
        assertEq(consumer.getNextNonce(), 10);
    }

    function testRevertWhen_Consumer_UpdateLatestNonceNonceUnauthorized() public {
        vm.expectRevert("Consumer.onlyJobManager: caller is not the job manager");
        consumer.updateLatestNonce(9);
    }

    function testRevertWhen_Consumer_ReceiveResultUnauthorized() public {
        test_Consumer_RequestJob();
        vm.prank(address(1));
        vm.expectRevert("Consumer.onlyJobManager: caller is not the job manager");
        consumer.receiveResult(DEFAULT_JOB_ID, abi.encode(address(0)));
    }

    function test_JobManager_SubmitResult() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs
        bytes memory resultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"3e6bbc4fa7b727191be2e24303d901f0dea5dbbda344a99fd39b19189dd584ab5b44e2e0d42f201fed4f1bccd3ff9691373d843001443f265bbde70f4ca3d7ef1b";

        vm.expectEmit(true, true, false, false);
        emit JobCompleted(DEFAULT_JOB_ID, abi.encode(address(0), 10));
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);

        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        // Check that job status is COMPLETED
        assertEq(jobMetadata.status, 3);

        // Check that state was correctly updated in Consumer contract
        assertEq(consumer.getBalance(address(0)), 10);
        assertEq(consumer.getJobResult(DEFAULT_JOB_ID), abi.encode(address(0), 10));
    }

    function testFailWhen_JobManager_SubmitResultInvalidEncodingOfResultWithMetadata() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory resultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"eb78cf205da110716882784d3cc7fd0e6fb504f295591b6a8a678f385275b9fc29d0f79daef111868115f91026ec8074f2dc29d9e96d0fafb6a21b2cd079d31b1b";

        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testFailWhen_JobManager_SubmitResultInvalidEncodingOfResult() public {
        test_Consumer_RequestJob();

        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory resultWithMetadata = hex"1d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signature = hex"761ca07f09f33cbc0619281e09c15bf562f2fc5fa30a5c2f0dc4fa4f252c0ca87939dc7cedfcb46d2db74c5cd6f0746610df6984e4ec429c1f92cde75b3f0df31c";

        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultUnauthorized() public {
        test_Consumer_RequestJob();
        vm.prank(address(2));
        vm.expectRevert("JobManager.submitResult: caller is not the relayer");
        jobManager.submitResult(abi.encode("resultWithMetadata"), abi.encodePacked("signature"));
    }

    function testRevertWhen_JobManager_SubmitResultInvalidSignature() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"89db44d83f6d32ff87647d9ac8d468b74ac6afdbc76f4ee7cc9260f93e3e48c9617f4ed3e7088e529a78c481fa9d58affb166dbb388e300e42c3de4e7b54d6091b";

        vm.expectRevert("JobManager.submitResult: Invalid signature");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultCancelledJob() public {
        test_JobManager_CancelJobByConsumer();

        bytes memory resultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"3e6bbc4fa7b727191be2e24303d901f0dea5dbbda344a99fd39b19189dd584ab5b44e2e0d42f201fed4f1bccd3ff9691373d843001443f265bbde70f4ca3d7ef1b";

        vm.expectRevert("JobManager.submitResult: job is not in pending state");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongOnchainInputHash() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b28c273dc8bd09a0b6f2a1e4d557d16b0026a0c70a998f9557c159fa082683a81500000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"b922f77061ac770c3298b83c1d6d59952c8acde812ce2396f50591c354bed82048be83a7fb07ae4b6be5af41cd21a37152fec13c8f6c0492793e0f964e963f731b";

        vm.expectRevert("JobManager.submitResult: onchain input signed by coprocessor doesn't match onchain input submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongProgramID() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000a70726f6772616d4944320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"ee4feb98d06db0c282eb4c7fbadc10981b435dd5d77c7403309c0eb4881394bd6c92a1e9cecab5c5b151a5d7b631005da237cfeb2e1f01e904a05b89690b18d21b";

        vm.expectRevert("JobManager.submitResult: program ID signed by coprocessor doesn't match program ID submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function testRevertWhen_JobManager_SubmitResultWrongMaxCycles() public {
        test_Consumer_RequestJob();

        bytes memory resultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563000000000000000000000000000000000000000000000000000000000098968100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signature = hex"3a374028d793747447b93584c54e58ee8eaea4fc8ea47c40e1713f4820a340d80c3d944ebb58fabd2e2fc209b56831c95883399650741cedaf8f1ca53fafae3b1c";

        vm.expectRevert("JobManager.submitResult: max cycles signed by coprocessor doesn't match max cycles submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResult(resultWithMetadata, signature);
    }

    function test_JobManager_SubmitResultForOffchainJob() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f3b215255b483ea5eb2b20629b5666150b91a3b6a3ff5083691afa83d697393229bef2a9d017d408c699767e5ae0289cd6046db9b33013fb931a31aedfca67f21c";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"5abb71cfbfedacaaa790f05264234af75c9b49bc7eb0544fac22774566b258634d55aac16eb2358e21f2e86fc624afefdbd17d149ffbb6c3e9cf96d31bfa90941b";

        assertEq(consumer.getNextNonce(), DEFAULT_NONCE);

        vm.expectEmit(true, true, false, false);
        emit JobCompleted(DEFAULT_JOB_ID, abi.encode(address(0), 10));
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest, 0);

        // Check that inputs are stored correctly in Consumer contract
        assertEq(consumer.getOnchainInputForJob(DEFAULT_JOB_ID), abi.encode(address(0)));
        assertEq(consumer.getNextNonce(), DEFAULT_NONCE + 1);

        JobManager.JobMetadata memory jobMetadata = jobManager.getJobMetadata(DEFAULT_JOB_ID);
        // Check that job status is COMPLETED
        assertEq(jobMetadata.status, 3);

        // Check that state was correctly updated in Consumer contract
        assertEq(consumer.getBalance(address(0)), 10);
        assertEq(consumer.getJobResult(DEFAULT_JOB_ID), abi.encode(address(0), 10));
    }

    function testFailWhen_JobManager_SubmitResultForOffchainJobInvalidEncodingOfRequest() public {
        // Generated using crates/scripts/signer.rs but with invalid ABI-encoding
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c76000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"63427b34c5cbd6673dee562772d6e8129d7f6f0857fa32abbec6a787537002e73e5a52f9d79148828e47af4c855c7f870d226fdbcff0d44526d28107c02f92311b";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"3e6bbc4fa7b727191be2e24303d901f0dea5dbbda344a99fd39b19189dd584ab5b44e2e0d42f201fed4f1bccd3ff9691373d843001443f265bbde70f4ca3d7ef1b";

        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest, 0);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobDuplicateNonce() public {
        test_JobManager_SubmitResultForOffchainJob();

        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f3b215255b483ea5eb2b20629b5666150b91a3b6a3ff5083691afa83d697393229bef2a9d017d408c699767e5ae0289cd6046db9b33013fb931a31aedfca67f21c";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"5abb71cfbfedacaaa790f05264234af75c9b49bc7eb0544fac22774566b258634d55aac16eb2358e21f2e86fc624afefdbd17d149ffbb6c3e9cf96d31bfa90941b";

        vm.expectRevert("JobManager.createJob: job already exists with this nonce and consumer");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest, 0);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobInvalidSignatureOnRequest() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory invalidSignatureOnRequest = hex"e3b215255b483ea5eb2b20629b5666150b91a3b6a3ff5083691afa83d697393229bef2a9d017d408c699767e5ae0289cd6046db9b33013fb931a31aedfca67f21c";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"5abb71cfbfedacaaa790f05264234af75c9b49bc7eb0544fac22774566b258634d55aac16eb2358e21f2e86fc624afefdbd17d149ffbb6c3e9cf96d31bfa90941b";

        vm.expectRevert("JobManager.submitResultForOffchainJob: Invalid signature on job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, invalidSignatureOnRequest, 0);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobInvalidSignatureOnResult() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f3b215255b483ea5eb2b20629b5666150b91a3b6a3ff5083691afa83d697393229bef2a9d017d408c699767e5ae0289cd6046db9b33013fb931a31aedfca67f21c";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory invalidSignatureOnResult = hex"eabb71cfbfedacaaa790f05264234af75c9b49bc7eb0544fac22774566b258634d55aac16eb2358e21f2e86fc624afefdbd17d149ffbb6c3e9cf96d31bfa90941b";

        vm.expectRevert("JobManager.submitResultForOffchainJob: Invalid signature on result");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, invalidSignatureOnResult, jobRequest, signatureOnRequest, 0);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongOnchainInputHash() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d494400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c76";
        bytes memory signatureOnRequest = hex"0847900563592bc554160cb5dde942085026785fc3180bcfc44900b4589f261046df6e1d35b9fcba7f7a9fa22a24e26bd25b97f67c3d9c1fe74b34b067de14761c";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"5abb71cfbfedacaaa790f05264234af75c9b49bc7eb0544fac22774566b258634d55aac16eb2358e21f2e86fc624afefdbd17d149ffbb6c3e9cf96d31bfa90941b";

        vm.expectRevert("JobManager.submitResult: onchain input signed by coprocessor doesn't match onchain input submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest, 0);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongOffchainInputHash() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"169ebeab00b7dea9c92d22caa35718804f586621c5b26f106243c6d8298845567bac997bf73a1e3cddd04211e3cba42560e177230339f0d08449028199ad2e201c";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"5abb71cfbfedacaaa790f05264234af75c9b49bc7eb0544fac22774566b258634d55aac16eb2358e21f2e86fc624afefdbd17d149ffbb6c3e9cf96d31bfa90941b";

        vm.expectRevert("JobManager.submitResultForOffchainJob: offchain input hash signed by coprocessor doesn't match offchain input hash of job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest, 0);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongStateHash() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"a67e865a55396ccda91545b8bd2325e38b7855dd8d77ee1732900003217c43b9224fb2814a0b049457844c64fd964b16af93e001bfbe3b3284a0c78cb3ed00cb1b";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"5abb71cfbfedacaaa790f05264234af75c9b49bc7eb0544fac22774566b258634d55aac16eb2358e21f2e86fc624afefdbd17d149ffbb6c3e9cf96d31bfa90941b";

        vm.expectRevert("JobManager.submitResultForOffchainJob: state hash signed by coprocessor doesn't match state hash of job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest, 0);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongProgramID() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000a70726f6772616d4944320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"daa7fba9cd9dc7d2b7012ca5c10a526546484395bf1bdc43d52e3d451f5c4e1c0ecc232daf3f120b3f6ac4a32288230156d91de203723d36187029db88f646ba1b";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"5abb71cfbfedacaaa790f05264234af75c9b49bc7eb0544fac22774566b258634d55aac16eb2358e21f2e86fc624afefdbd17d149ffbb6c3e9cf96d31bfa90941b";

        vm.expectRevert("JobManager.submitResult: program ID signed by coprocessor doesn't match program ID submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest, 0);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongMaxCycles() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000032000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"31560314002dab9fa60aef5f938f99c8f686985e34dd2787ad36eeed9f5fa9813822535733101d20e949d238799322beee1f17afb3faf10a03d103e4fa2e7c0a1b";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201d890864b9237983eecb34e67a48454a8fc1950f4f16bf79bad84e0d61e4c0b2290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"5abb71cfbfedacaaa790f05264234af75c9b49bc7eb0544fac22774566b258634d55aac16eb2358e21f2e86fc624afefdbd17d149ffbb6c3e9cf96d31bfa90941b";

        vm.expectRevert("JobManager.submitResult: max cycles signed by coprocessor doesn't match max cycles submitted with job");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest, 0);
    }

    function testRevertWhen_JobManager_SubmitResultForOffchainJobWrongJobID() public {
        // Generated using crates/scripts/signer.rs
        bytes memory jobRequest = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000db8cff278adccf9e9b5da745b44e754fc4ee3c7600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";
        bytes memory signatureOnRequest = hex"f3b215255b483ea5eb2b20629b5666150b91a3b6a3ff5083691afa83d697393229bef2a9d017d408c699767e5ae0289cd6046db9b33013fb931a31aedfca67f21c";

        bytes memory offchainResultWithMetadata = hex"00000000000000000000000000000000000000000000000000000000000000201afc7a16e2f042746d86845daf39076cca99f032f6594e0dcb92e3b5c4093783290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000970726f6772616d4944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a";
        bytes memory signatureOnResult = hex"69667c24005c94d04650624a9f7db4cbabcf0d3d7c89c13071fabdf16e86e2550994d3bae71979c9c58f45fc67a1755f3b1385234a9d194dc80e9d26dffecff61b";

        vm.expectRevert("JobManager.submitResultForOffchainJob: job ID signed by coprocessor doesn't match job ID of job request");
        vm.prank(RELAYER);
        jobManager.submitResultForOffchainJob(offchainResultWithMetadata, signatureOnResult, jobRequest, signatureOnRequest, 0);
    }
}


