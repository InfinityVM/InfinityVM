// This file is @generated by prost-build.
/// JobStatus represents the status of a job including an optional failure reason.
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(borsh::BorshSerialize, borsh::BorshDeserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobStatus {
    /// The status type of the job.
    #[prost(enumeration = "JobStatusType", tag = "1")]
    pub status: i32,
    /// The optional reason for failure.
    #[prost(string, optional, tag = "2")]
    #[serde(default)]
    pub failure_reason: ::core::option::Option<::prost::alloc::string::String>,
    /// The optional number of retries
    #[prost(uint32, tag = "3")]
    #[serde(default)]
    pub retries: u32,
}
/// JobResult represents the result of a program executed by the coprocessor with specific
/// inputs.
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobResult {
    /// The job ID (hash of nonce and consumer address)
    #[prost(bytes = "vec", tag = "1")]
    #[serde_as(as = "Hex")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    /// Nonce of the job request for a given consumer contract
    #[prost(uint64, tag = "2")]
    pub nonce: u64,
    /// CPU cycle limit for job execution
    #[prost(uint64, tag = "3")]
    pub max_cycles: u64,
    /// Address of consumer contract to receive this result. The address is 20 bytes (no zero padding).
    #[prost(bytes = "vec", tag = "4")]
    #[serde_as(as = "Hex")]
    pub consumer_address: ::prost::alloc::vec::Vec<u8>,
    /// The ZK program verification key
    #[prost(bytes = "vec", tag = "5")]
    #[serde_as(as = "Hex")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    /// Program execution input posted onchain
    #[prost(bytes = "vec", tag = "6")]
    #[serde_as(as = "Hex")]
    pub onchain_input: ::prost::alloc::vec::Vec<u8>,
    /// Hash of execution input posted offchain (DA)
    #[prost(bytes = "vec", tag = "7")]
    #[serde_as(as = "Hex")]
    pub offchain_input_hash: ::prost::alloc::vec::Vec<u8>,
    /// Signature on the offchain job request
    #[prost(bytes = "vec", tag = "8")]
    #[serde_as(as = "Hex")]
    pub request_signature: ::prost::alloc::vec::Vec<u8>,
    /// ABI-encoded result of job execution with metadata
    /// tuple(JobID,OnchainInputHash,MaxCycles,ProgramID,RawOutput)
    #[prost(bytes = "vec", tag = "9")]
    #[serde_as(as = "Hex")]
    pub result_with_metadata: ::prost::alloc::vec::Vec<u8>,
    /// The signature of the operator that executed the job
    #[prost(bytes = "vec", tag = "10")]
    #[serde_as(as = "Hex")]
    pub zkvm_operator_signature: ::prost::alloc::vec::Vec<u8>,
    /// The status of the job.
    #[prost(message, optional, tag = "11")]
    pub status: ::core::option::Option<JobStatus>,
    /// Tx hash of relayed result
    #[prost(bytes = "vec", tag = "12")]
    #[serde_as(as = "Hex")]
    pub relay_tx_hash: ::prost::alloc::vec::Vec<u8>,
}
/// JobStatusType defines the status of a submitted coprocessor job.
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(borsh::BorshSerialize, borsh::BorshDeserialize)]
#[borsh(use_discriminant = true)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JobStatusType {
    Unspecified = 0,
    Pending = 1,
    Done = 2,
    Failed = 3,
    Relayed = 4,
}
impl JobStatusType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            JobStatusType::Unspecified => "JOB_STATUS_TYPE_UNSPECIFIED",
            JobStatusType::Pending => "JOB_STATUS_TYPE_PENDING",
            JobStatusType::Done => "JOB_STATUS_TYPE_DONE",
            JobStatusType::Failed => "JOB_STATUS_TYPE_FAILED",
            JobStatusType::Relayed => "JOB_STATUS_TYPE_RELAYED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JOB_STATUS_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "JOB_STATUS_TYPE_PENDING" => Some(Self::Pending),
            "JOB_STATUS_TYPE_DONE" => Some(Self::Done),
            "JOB_STATUS_TYPE_FAILED" => Some(Self::Failed),
            "JOB_STATUS_TYPE_RELAYED" => Some(Self::Relayed),
            _ => None,
        }
    }
}
/// SubmitJobRequest defines the request structure to submit a job to the
/// coprocessing coprocessor_node.
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitJobRequest {
    /// ABI-encoded offchain job request
    #[prost(bytes = "vec", tag = "1")]
    pub request: ::prost::alloc::vec::Vec<u8>,
    /// Signature on ABI-encoded offchain job request
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Value of offchain input passed into program (this isn't signed over)
    #[prost(bytes = "vec", tag = "3")]
    pub offchain_input: ::prost::alloc::vec::Vec<u8>,
    /// The strategy used to relay results to the consumer. This is not directly signed by the user
    /// so to avoid risks of it getting maliciously modified in transit one should ensure to use
    /// TLS with the coprocessor node.
    #[prost(enumeration = "RelayStrategy", tag = "4")]
    pub relay_strategy: i32,
}
/// SubmitJobResponse defines the response structure to submit a job to the
/// coprocessing coprocessor_node.
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitJobResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub job_id: ::prost::alloc::vec::Vec<u8>,
}
/// GetResultRequest defines the request structure to get the result of a
/// coprocessing job.
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResultRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub job_id: ::prost::alloc::vec::Vec<u8>,
}
/// GetResultResponse defines the response structure to get the result of a
/// coprocessing job.
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResultResponse {
    #[prost(message, optional, tag = "1")]
    pub job_result: ::core::option::Option<JobResult>,
}
/// SubmitProgramRequest defines the request structure to submit a new program,
/// which contains the compiled ELF blob.
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitProgramRequest {
    /// The compiled zkVM program ELF.
    #[prost(bytes = "vec", tag = "1")]
    #[serde_as(as = "Hex")]
    pub program_elf: ::prost::alloc::vec::Vec<u8>,
    /// Type of ZKVM to execute
    #[prost(enumeration = "VmType", tag = "2")]
    pub vm_type: i32,
}
/// SubmitProgramResponse defines the response structure to generate a unique
/// program verification key.
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitProgramResponse {
    /// The ZK program verification key
    #[prost(bytes = "vec", tag = "1")]
    #[serde_as(as = "Hex")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
}
/// Type of ZKVM to execute
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VmType {
    Risc0 = 0,
    Sp1 = 1,
}
impl VmType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            VmType::Risc0 => "Risc0",
            VmType::Sp1 => "Sp1",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Risc0" => Some(Self::Risc0),
            "Sp1" => Some(Self::Sp1),
            _ => None,
        }
    }
}
/// Strategy for relaying results
#[serde_as]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RelayStrategy {
    /// Relay the result on chain as soon as the job is done. This means that
    /// this may be relayed before prior requests.
    Unordered = 0,
    /// Relay the result on chain in the order the job requests where submitted.
    /// This means that if a job takes awhile, it may block other completed jobs
    /// that where submitted after.
    ///
    /// Stateful jobs that verify their state root onchain likely want to use this
    /// option.
    Ordered = 1,
}
impl RelayStrategy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RelayStrategy::Unordered => "Unordered",
            RelayStrategy::Ordered => "Ordered",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Unordered" => Some(Self::Unordered),
            "Ordered" => Some(Self::Ordered),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod coprocessor_node_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service defines the gRPC service for the coprocessing node.
    #[derive(Debug, Clone)]
    pub struct CoprocessorNodeClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CoprocessorNodeClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CoprocessorNodeClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CoprocessorNodeClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CoprocessorNodeClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SubmitJob defines the gRPC method for submitting a coprocessing job.
        pub async fn submit_job(
            &mut self,
            request: impl tonic::IntoRequest<super::SubmitJobRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitJobResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/coprocessor_node.v1.CoprocessorNode/SubmitJob",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("coprocessor_node.v1.CoprocessorNode", "SubmitJob"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// GetResult defines the gRPC method for getting the result of a coprocessing
        /// job.
        pub async fn get_result(
            &mut self,
            request: impl tonic::IntoRequest<super::GetResultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetResultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/coprocessor_node.v1.CoprocessorNode/GetResult",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("coprocessor_node.v1.CoprocessorNode", "GetResult"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SubmitProgram defines the gRPC method for submitting a new program to
        /// generate a unique program verification key.
        pub async fn submit_program(
            &mut self,
            request: impl tonic::IntoRequest<super::SubmitProgramRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitProgramResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/coprocessor_node.v1.CoprocessorNode/SubmitProgram",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "coprocessor_node.v1.CoprocessorNode",
                        "SubmitProgram",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod coprocessor_node_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with CoprocessorNodeServer.
    #[async_trait]
    pub trait CoprocessorNode: std::marker::Send + std::marker::Sync + 'static {
        /// SubmitJob defines the gRPC method for submitting a coprocessing job.
        async fn submit_job(
            &self,
            request: tonic::Request<super::SubmitJobRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitJobResponse>,
            tonic::Status,
        >;
        /// GetResult defines the gRPC method for getting the result of a coprocessing
        /// job.
        async fn get_result(
            &self,
            request: tonic::Request<super::GetResultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetResultResponse>,
            tonic::Status,
        >;
        /// SubmitProgram defines the gRPC method for submitting a new program to
        /// generate a unique program verification key.
        async fn submit_program(
            &self,
            request: tonic::Request<super::SubmitProgramRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitProgramResponse>,
            tonic::Status,
        >;
    }
    /// Service defines the gRPC service for the coprocessing node.
    #[derive(Debug)]
    pub struct CoprocessorNodeServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> CoprocessorNodeServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for CoprocessorNodeServer<T>
    where
        T: CoprocessorNode,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/coprocessor_node.v1.CoprocessorNode/SubmitJob" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitJobSvc<T: CoprocessorNode>(pub Arc<T>);
                    impl<
                        T: CoprocessorNode,
                    > tonic::server::UnaryService<super::SubmitJobRequest>
                    for SubmitJobSvc<T> {
                        type Response = super::SubmitJobResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubmitJobRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CoprocessorNode>::submit_job(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubmitJobSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/coprocessor_node.v1.CoprocessorNode/GetResult" => {
                    #[allow(non_camel_case_types)]
                    struct GetResultSvc<T: CoprocessorNode>(pub Arc<T>);
                    impl<
                        T: CoprocessorNode,
                    > tonic::server::UnaryService<super::GetResultRequest>
                    for GetResultSvc<T> {
                        type Response = super::GetResultResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetResultRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CoprocessorNode>::get_result(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetResultSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/coprocessor_node.v1.CoprocessorNode/SubmitProgram" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitProgramSvc<T: CoprocessorNode>(pub Arc<T>);
                    impl<
                        T: CoprocessorNode,
                    > tonic::server::UnaryService<super::SubmitProgramRequest>
                    for SubmitProgramSvc<T> {
                        type Response = super::SubmitProgramResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubmitProgramRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CoprocessorNode>::submit_program(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubmitProgramSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for CoprocessorNodeServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "coprocessor_node.v1.CoprocessorNode";
    impl<T> tonic::server::NamedService for CoprocessorNodeServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
