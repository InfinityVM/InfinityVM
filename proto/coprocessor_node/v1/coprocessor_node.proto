syntax = "proto3";
package coprocessor_node.v1;

import "coprocessor_node/v1/job.proto";

option go_package = "github.com/ethos-works/infinityvm/coprocessor_node/pkg/types";

// Service defines the gRPC service for the coprocessing node.
service CoprocessorNode {
  // SubmitJob defines the gRPC method for submitting a coprocessing job.
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse) {}

  // SubmitStatefulJob defines the gRPC method for submitting a stateful coprocessing job.
  rpc SubmitStatefulJob(SubmitStatefulJobRequest) returns (SubmitStatefulJobResponse) {}

  // GetResult defines the gRPC method for getting the result of a coprocessing
  // job.
  rpc GetResult(GetResultRequest) returns (GetResultResponse) {}

  // SubmitProgram defines the gRPC method for submitting a new program to
  // generate a unique program verification key.
  rpc SubmitProgram(SubmitProgramRequest) returns (SubmitProgramResponse) {}
}

// Type of ZKVM to execute
enum VmType {
  Risc0 = 0;
  Sp1 = 1;
}

// SubmitJobRequest defines the request structure to submit a job to the
// coprocessing coprocessor_node.
message SubmitJobRequest {
  // ABI-encoded offchain job request
  bytes request = 1;
  // Signature on ABI-encoded offchain job request
  bytes signature = 2;
}

// SubmitJobResponse defines the response structure to submit a job to the
// coprocessing coprocessor_node.
message SubmitJobResponse {
  bytes job_id = 1;
}

// SubmitStatefulJobRequest defines the request structure to submit a stateful
// job to the coprocessing coprocessor_node.
message SubmitStatefulJobRequest {
  // ABI-encoded offchain job request
  bytes request = 1;
  // Signature on ABI-encoded offchain job request
  bytes signature = 2;
  // Value of program state (this isn't signed over)
  bytes program_state = 3;
}

// SubmitStatefulJobResponse defines the response structure to submit a
// stateful job to the coprocessing coprocessor_node.
message SubmitStatefulJobResponse {
  bytes job_id = 1;
}

// GetResultRequest defines the request structure to get the result of a
// coprocessing job.
message GetResultRequest {
  bytes job_id = 1;
}

// GetResultResponse defines the response structure to get the result of a
// coprocessing job.
message GetResultResponse {
  JobResult job_result = 1;
}

// SubmitProgramRequest defines the request structure to submit a new program,
// which contains the compiled ELF blob.
message SubmitProgramRequest {
  // The compiled zkVM program ELF.
  bytes program_elf = 1;
  // Type of ZKVM to execute
  VmType vm_type = 2;
}

// SubmitProgramResponse defines the response structure to generate a unique
// program verification key.
message SubmitProgramResponse {
  // The ZK program verification key
  bytes program_id = 1;
}
