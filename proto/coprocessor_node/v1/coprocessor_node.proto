syntax = "proto3";
package coprocessor_node.v1;

import "coprocessor_node/v1/job.proto";

// Service defines the gRPC service for the coprocessing node.
service CoprocessorNode {
  // SubmitJob defines the gRPC method for submitting a coprocessing job.
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse) {}

  // GetResult defines the gRPC method for getting the result of a coprocessing
  // job.
  rpc GetResult(GetResultRequest) returns (GetResultResponse) {}

  // SubmitProgram defines the gRPC method for submitting a new program to
  // generate a unique program verification key.
  rpc SubmitProgram(SubmitProgramRequest) returns (SubmitProgramResponse) {}
}

// Type of ZKVM to execute
enum VmType {
  Risc0 = 0;
  Sp1 = 1;
}

// Strategy for relaying results
enum RelayStrategy {
  // Relay the result on chain as soon as the job is done. This means that
  // this may be relayed before prior requests.
  Unordered = 0;
  // Relay the result on chain in the order the job requests where submitted.
  // This means that if a job takes awhile, it may block other completed jobs
  // that where submitted after.
  //
  // Stateful jobs that verify their state root onchain likely want to use this
  // option.
  Ordered = 1;
}

// SubmitJobRequest defines the request structure to submit a job to the
// coprocessing coprocessor_node.
message SubmitJobRequest {
  // ABI-encoded offchain job request
  bytes request = 1;
  // Signature on ABI-encoded offchain job request
  bytes signature = 2;
  // Value of offchain input passed into program (this isn't signed over)
  bytes offchain_input = 3;
  // The strategy used to relay results to the consumer. This is not directly signed by the user
  // so to avoid risks of it getting maliciously modified in transit one should ensure to use
  // TLS with the coprocessor node.
  RelayStrategy relay_strategy = 4;
}

// SubmitJobResponse defines the response structure to submit a job to the
// coprocessing coprocessor_node.
message SubmitJobResponse {
  bytes job_id = 1;
}

// GetResultRequest defines the request structure to get the result of a
// coprocessing job.
message GetResultRequest {
  bytes job_id = 1;
}

// GetResultResponse defines the response structure to get the result of a
// coprocessing job.
message GetResultResponse {
  JobResult job_result = 1;
}

// SubmitProgramRequest defines the request structure to submit a new program,
// which contains the compiled ELF blob.
message SubmitProgramRequest {
  // The compiled zkVM program ELF.
  bytes program_elf = 1;
  // Type of ZKVM to execute
  VmType vm_type = 2;
}

// SubmitProgramResponse defines the response structure to generate a unique
// program verification key.
message SubmitProgramResponse {
  // The ZK program verification key
  bytes program_id = 1;
}
