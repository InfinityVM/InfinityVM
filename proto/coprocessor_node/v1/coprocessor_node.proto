syntax = "proto3";
package coprocessor_node.v1;

import "google/api/annotations.proto";
import "coprocessor_node/v1/job.proto";
import "coprocessor_node/v1/zkvm_executor.proto";

option go_package = "github.com/ethos-works/infinityvm/coprocessor_node/pkg/types";

// Service defines the gRPC service for the coprocessing node.
service CoprocessorNode {
  // SubmitJob defines the gRPC method for submitting a coprocessing job.
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse) {
    option (google.api.http) = {
      post: "/v1/coprocessor_node/submit_job"
      body: "*"
    };
  }

  // GetResult defines the gRPC method for getting the result of a coprocessing
  // job.
  rpc GetResult(GetResultRequest) returns (GetResultResponse) {
    option (google.api.http).get = "/v1/coprocessor_node/result/{job_id}";
  }

  // SubmitProgram defines the gRPC method for submitting a new program to
  // generate a unique program verification key.
  rpc SubmitProgram(SubmitProgramRequest) returns (SubmitProgramResponse) {
    option (google.api.http) = {
      post: "/v1/coprocessor_node/submit_program"
      body: "*"
    };
  }
}

// SubmitJobRequest defines the request structure to submit a job to the
// coprocessing coprocessor_node.
message SubmitJobRequest {
  // The zkvm job to run.
  Job job = 1;
}

// SubmitJobResponse defines the response structure to submit a job to the
// coprocessing coprocessor_node.
message SubmitJobResponse {
  // Nonce of the job request
  uint64 nonce = 1;
  // The address of the contract to execute a callback with a result with
  bytes contract_address = 2;
}

// GetResultRequest defines the request structure to get the result of a
// coprocessing job.
message GetResultRequest {
  uint32 job_id = 1;
}

// GetResultResponse defines the response structure to get the result of a
// coprocessing job.
message GetResultResponse {
  Job job = 1;
}

// SubmitProgramRequest defines the request structure to submit a new program,
// which contains the compiled ELF blob.
message SubmitProgramRequest {
  // The compiled zkVM program ELF.
  bytes program_elf = 1;
  // Type of ZKVM to execute
  VmType vm_type = 2;
}

// SubmitProgramResponse defines the response structure to generate a unique
// program verification key.
message SubmitProgramResponse {
  // The ZK program verification key
  bytes program_verifying_key = 1;
}
