syntax = "proto3";
package coprocessor_node.v1;

// JobStatusType defines the status of a submitted coprocessor job.
enum JobStatusType {
  JOB_STATUS_TYPE_UNSPECIFIED = 0;
  JOB_STATUS_TYPE_PENDING = 1;
  JOB_STATUS_TYPE_DONE = 2;
  JOB_STATUS_TYPE_FAILED = 3;
  JOB_STATUS_TYPE_RELAYED = 4;
}

// JobStatus represents the status of a job including an optional failure reason.
message JobStatus {
  // The status type of the job.
  JobStatusType status = 1;
  // The optional reason for failure.
  optional string failure_reason = 2;
  // The optional number of retries
  uint32 retries = 3;
}

// JobResult represents the result of a program executed by the coprocessor with specific
// inputs.
message JobResult {
  // The job ID (hash of nonce and consumer address)
  bytes id = 1;
  // Nonce of the job request for a given consumer contract
  uint64 nonce = 2;
  // CPU cycle limit for job execution
  uint64 max_cycles = 3;
  // Address of consumer contract to receive this result. The address is 20 bytes (no zero padding).
  bytes consumer_address = 4;
  // The ZK program verification key
  bytes program_id = 5;
  // Program execution input posted onchain
  bytes onchain_input = 6;
  // Hash of execution input posted offchain (DA)
  bytes offchain_input_hash = 7;
  // Signature on the offchain job request
  bytes request_signature = 8;
  // ABI-encoded result of job execution with metadata
  // tuple(JobID,OnchainInputHash,MaxCycles,ProgramID,RawOutput)
  bytes result_with_metadata = 9;
  // The signature of the operator that executed the job
  bytes zkvm_operator_signature = 10;
  // The status of the job.
  JobStatus status = 11;
  // Tx hash of relayed result
  bytes relay_tx_hash = 12;
}
