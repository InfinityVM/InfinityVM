syntax = "proto3";
package coprocessor_node.v1;

option go_package = "github.com/ethos-works/infinityvm/server/pkg/types";

// ============================================================================
// These types are copied from the ZK shim Proto types temporarily.
// ============================================================================

service ZkvmExecutor {
  rpc execute(ExecuteRequest) returns (ExecuteResponse) {}
  rpc create_elf(CreateElfRequest) returns (CreateElfResponse) {}
}

// Type of ZKVM to execute
enum VmType {
  Risc0 = 0;
  Sp1 = 1;
}

// The inputs to the zkvm program that get attested to by the zkvm operator.
message JobInputs {
  // Job identifier, as defined by the ethos chain job manager contracts.
  uint32 job_id = 1;
  // The maximum amount of cpu cycles. In the future this may
  // be something closer to gas/opcode count.
  uint64 max_cycles = 2;
  // Type of ZKVM to execute
  VmType vm_type = 3;
  // The verifying key for the program. The executor needs to check
  // that this matches up with the program ELF before using it.
  bytes program_verifying_key = 4;
  // The input to the zkvm program. The zkvm program is in charge
  // of deserializing this.
  bytes program_input = 5;
}

// A request to execute a zkvm program.
message ExecuteRequest {
  // The job inputs for running the program that are attested to by the executor
  // operator to assert faithful execution.
  JobInputs inputs = 2;
}

// The results of executing a program
message ExecuteResponse {
  // The inputs to the program execution request. These need to be included
  // in the attested to payload to ensure that a zk proof can be constructed
  // just using the attested payload.
  JobInputs inputs = 1;
  // Output of the program specified by the verified inputs.
  bytes raw_output = 2;
  // The Soldity ABI encoded response intended to be submitted back to the
  // job manager smart contract
  bytes result_with_metadata = 3;
  // The ZKVM operator who attests to the job.
  // Ethereum address, as the bytes of an EIP-55 checksum string.
  bytes zkvm_operator_address = 4;
  // RLP v,r,s signature over
  // `eip191_hash_message(result_with_metadata)`
  bytes zkvm_operator_signature = 5;
}

message CreateElfRequest {
  // Raw bytes of the ELF.
  bytes program_elf = 1;
  // The type of ZKVM the ELF targets for execution.
  VmType vm_type = 2;
}

message CreateElfResponse {
  // The verifying key of the ELF submitted.
  bytes verifying_key = 1;
}
