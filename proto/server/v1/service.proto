syntax = "proto3";
package server.v1;

import "google/api/annotations.proto";
import "server/v1/job.proto";

option go_package = "github.com/ethos-works/infinityvm/server/pkg/types";

// Service defines the gRPC service for the coprocessing server.
service Service {
  // SubmitJob defines the gRPC method for submitting a coprocessing job.
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse) {
    option (google.api.http) = {
      post: "/v1/server/submit_job"
      body: "*"
    };
  }

  // GetResult defines the gRPC method for getting the result of a coprocessing
  // job.
  rpc GetResult(GetResultRequest) returns (GetResultResponse) {
    option (google.api.http).get = "/v1/server/result/{job_id}";
  }

  // SubmitProgram defines the gRPC method for submitting a new program to
  // generate a unique program verification key.
  rpc SubmitProgram(SubmitProgramRequest) returns (SubmitProgramResponse) {
    option (google.api.http) = {
      post: "/v1/server/submit_program"
      body: "*"
    };
  }
}

// SubmitJobRequest defines the request structure to submit a job to the
// coprocessing server.
message SubmitJobRequest {
  Job job = 1;
}

// SubmitJobResponse defines the response structure to submit a job to the
// coprocessing server.
message SubmitJobResponse {
  uint64 job_id = 1;
}

// GetResultRequest defines the request structure to get the result of a
// coprocessing job.
message GetResultRequest {
  uint64 job_id = 1;
}

// GetResultResponse defines the response structure to get the result of a
// coprocessing job.
message GetResultResponse {
  Job job = 1;
  bytes result = 2;
  bytes zkvm_operator_address = 3;
  bytes zkvm_operator_signature = 4;
}

// SubmitProgramRequest defines the request structure to submit a new program,
// which contains the compiled ELF blob.
message SubmitProgramRequest {
  // The compiled zkVM program ELF.
  bytes program_elf = 1;
}

// SubmitProgramResponse defines the response structure to generate a unique
// program verification key.
message SubmitProgramResponse {
  // The ZK program verification key
  bytes program_verifying_key = 1;
}
