// @generated
/// The inputs to the zkvm program that get attested to by the zkvm operator.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobInputs {
    /// Job identifier, as defined by the ethos chain job manager contracts.
    #[prost(uint32, tag="1")]
    pub job_id: u32,
    /// The maximum amount of cpu cycles. In the future this may
    /// be something closer to gas/opcode count.
    #[prost(uint64, tag="2")]
    pub max_cycles: u64,
    /// Type of ZKVM to execute
    #[prost(enumeration="VmType", tag="3")]
    pub vm_type: i32,
    /// The verifying key for the program. The executor needs to check
    /// that this matches up with the program ELF before using it.
    #[prost(bytes="vec", tag="4")]
    pub program_verifying_key: ::prost::alloc::vec::Vec<u8>,
    /// The input to the zkvm program. The zkvm program is in charge
    /// of deserializing this.
    #[prost(bytes="vec", tag="5")]
    pub program_input: ::prost::alloc::vec::Vec<u8>,
}
/// A request to execute a zkvm program.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteRequest {
    /// The job inputs for running the program that are attested to by the executor
    /// operator to assert faithful execution.
    #[prost(message, optional, tag="2")]
    pub inputs: ::core::option::Option<JobInputs>,
}
/// The results of executing a program
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteResponse {
    /// The inputs to the program execution request. These need to be included
    /// in the attested to payload to ensure that a zk proof can be constructed
    /// just using the attested payload.
    #[prost(message, optional, tag="1")]
    pub inputs: ::core::option::Option<JobInputs>,
    /// Output of the program specified by the verified inputs.
    #[prost(bytes="vec", tag="2")]
    pub raw_output: ::prost::alloc::vec::Vec<u8>,
    /// The Soldity ABI encoded response intended to be submitted back to the
    /// job manager smart contract
    #[prost(bytes="vec", tag="3")]
    pub result_with_metadata: ::prost::alloc::vec::Vec<u8>,
    /// The ZKVM operator who attests to the job.
    /// Ethereum address, as the bytes of an EIP-55 checksum string.
    #[prost(bytes="vec", tag="4")]
    pub zkvm_operator_address: ::prost::alloc::vec::Vec<u8>,
    /// RLP v,r,s signature over
    /// `eip191_hash_message(result_with_metadata)`
    #[prost(bytes="vec", tag="5")]
    pub zkvm_operator_signature: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateElfRequest {
    /// Raw bytes of the ELF.
    #[prost(bytes="vec", tag="1")]
    pub program_elf: ::prost::alloc::vec::Vec<u8>,
    /// The type of ZKVM the ELF targets for execution.
    #[prost(enumeration="VmType", tag="2")]
    pub vm_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateElfResponse {
    /// The verifying key of the ELF submitted.
    #[prost(bytes="vec", tag="1")]
    pub verifying_key: ::prost::alloc::vec::Vec<u8>,
}
/// Type of ZKVM to execute
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VmType {
    Risc0 = 0,
    Sp1 = 1,
}
impl VmType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            VmType::Risc0 => "Risc0",
            VmType::Sp1 => "Sp1",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Risc0" => Some(Self::Risc0),
            "Sp1" => Some(Self::Sp1),
            _ => None,
        }
    }
}
/// Job represents a program to be executed by the coprocessor with specific
/// inputs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Job {
    /// The job ID generated by the InfinityVM chain.
    #[prost(uint32, tag="1")]
    pub id: u32,
    /// The ZK program verification key
    #[prost(bytes="vec", tag="2")]
    pub program_verifying_key: ::prost::alloc::vec::Vec<u8>,
    /// Type of ZKVM to execute
    #[prost(enumeration="VmType", tag="3")]
    pub vm_type: i32,
    /// Program execution input
    #[prost(bytes="vec", tag="4")]
    pub input: ::prost::alloc::vec::Vec<u8>,
    /// The address of the contract to execute a callback with a result with
    #[prost(bytes="vec", tag="5")]
    pub contract_address: ::prost::alloc::vec::Vec<u8>,
    /// CPU cycle limit for job execution
    #[prost(uint64, tag="6")]
    pub max_cycles: u64,
    /// The result of job execution
    #[prost(bytes="vec", tag="7")]
    pub result: ::prost::alloc::vec::Vec<u8>,
    /// The address of the operator that executed the job
    #[prost(bytes="vec", tag="8")]
    pub zkvm_operator_address: ::prost::alloc::vec::Vec<u8>,
    /// The signature of the operator that executed the job
    #[prost(bytes="vec", tag="9")]
    pub zkvm_operator_signature: ::prost::alloc::vec::Vec<u8>,
    /// The status of the job.
    #[prost(enumeration="JobStatus", tag="10")]
    pub status: i32,
}
/// JobStatus defines the status of a submitted coprocessor job.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JobStatus {
    Unspecified = 0,
    Pending = 1,
    Done = 2,
    Failed = 3,
}
impl JobStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            JobStatus::Unspecified => "JOB_STATUS_UNSPECIFIED",
            JobStatus::Pending => "JOB_STATUS_PENDING",
            JobStatus::Done => "JOB_STATUS_DONE",
            JobStatus::Failed => "JOB_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JOB_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "JOB_STATUS_PENDING" => Some(Self::Pending),
            "JOB_STATUS_DONE" => Some(Self::Done),
            "JOB_STATUS_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
/// SubmitJobRequest defines the request structure to submit a job to the
/// coprocessing server.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitJobRequest {
    #[prost(message, optional, tag="1")]
    pub job: ::core::option::Option<Job>,
}
/// SubmitJobResponse defines the response structure to submit a job to the
/// coprocessing server.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitJobResponse {
    #[prost(uint32, tag="1")]
    pub job_id: u32,
}
/// GetResultRequest defines the request structure to get the result of a
/// coprocessing job.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResultRequest {
    #[prost(uint32, tag="1")]
    pub job_id: u32,
}
/// GetResultResponse defines the response structure to get the result of a
/// coprocessing job.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResultResponse {
    #[prost(message, optional, tag="1")]
    pub job: ::core::option::Option<Job>,
}
/// SubmitProgramRequest defines the request structure to submit a new program,
/// which contains the compiled ELF blob.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitProgramRequest {
    /// The compiled zkVM program ELF.
    #[prost(bytes="vec", tag="1")]
    pub program_elf: ::prost::alloc::vec::Vec<u8>,
    /// Type of ZKVM to execute
    #[prost(enumeration="VmType", tag="2")]
    pub vm_type: i32,
}
/// SubmitProgramResponse defines the response structure to generate a unique
/// program verification key.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitProgramResponse {
    /// The ZK program verification key
    #[prost(bytes="vec", tag="1")]
    pub program_verifying_key: ::prost::alloc::vec::Vec<u8>,
}
include!("server.v1.tonic.rs");
// @@protoc_insertion_point(module)