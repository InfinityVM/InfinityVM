// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/eth/eth_client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/eth/eth_client.go -package=mock -destination=pkg/mock/eth_client.go EthClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/ethos-works/InfinityVM/server/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockEthClientI is a mock of EthClientI interface.
type MockEthClientI struct {
	ctrl     *gomock.Controller
	recorder *MockEthClientIMockRecorder
}

// MockEthClientIMockRecorder is the mock recorder for MockEthClientI.
type MockEthClientIMockRecorder struct {
	mock *MockEthClientI
}

// NewMockEthClientI creates a new mock instance.
func NewMockEthClientI(ctrl *gomock.Controller) *MockEthClientI {
	mock := &MockEthClientI{ctrl: ctrl}
	mock.recorder = &MockEthClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthClientI) EXPECT() *MockEthClientIMockRecorder {
	return m.recorder
}

// ExecuteCallback mocks base method.
func (m *MockEthClientI) ExecuteCallback(ctx context.Context, job *types.Job) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCallback", ctx, job)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCallback indicates an expected call of ExecuteCallback.
func (mr *MockEthClientIMockRecorder) ExecuteCallback(ctx, job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCallback", reflect.TypeOf((*MockEthClientI)(nil).ExecuteCallback), ctx, job)
}
