// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/types/zkvm_executor_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=pkg/types/zkvm_executor_grpc.pb.go -package mock -destination pkg/mock/zk_executor_client.go ZkvmExecutorClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/ethos-works/InfinityVM/server/pkg/types"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockZkvmExecutorClient is a mock of ZkvmExecutorClient interface.
type MockZkvmExecutorClient struct {
	ctrl     *gomock.Controller
	recorder *MockZkvmExecutorClientMockRecorder
}

// MockZkvmExecutorClientMockRecorder is the mock recorder for MockZkvmExecutorClient.
type MockZkvmExecutorClientMockRecorder struct {
	mock *MockZkvmExecutorClient
}

// NewMockZkvmExecutorClient creates a new mock instance.
func NewMockZkvmExecutorClient(ctrl *gomock.Controller) *MockZkvmExecutorClient {
	mock := &MockZkvmExecutorClient{ctrl: ctrl}
	mock.recorder = &MockZkvmExecutorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZkvmExecutorClient) EXPECT() *MockZkvmExecutorClientMockRecorder {
	return m.recorder
}

// CreateElf mocks base method.
func (m *MockZkvmExecutorClient) CreateElf(ctx context.Context, in *types.CreateElfRequest, opts ...grpc.CallOption) (*types.CreateElfResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateElf", varargs...)
	ret0, _ := ret[0].(*types.CreateElfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElf indicates an expected call of CreateElf.
func (mr *MockZkvmExecutorClientMockRecorder) CreateElf(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElf", reflect.TypeOf((*MockZkvmExecutorClient)(nil).CreateElf), varargs...)
}

// Execute mocks base method.
func (m *MockZkvmExecutorClient) Execute(ctx context.Context, in *types.ExecuteRequest, opts ...grpc.CallOption) (*types.ExecuteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(*types.ExecuteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockZkvmExecutorClientMockRecorder) Execute(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockZkvmExecutorClient)(nil).Execute), varargs...)
}

// MockZkvmExecutorServer is a mock of ZkvmExecutorServer interface.
type MockZkvmExecutorServer struct {
	ctrl     *gomock.Controller
	recorder *MockZkvmExecutorServerMockRecorder
}

// MockZkvmExecutorServerMockRecorder is the mock recorder for MockZkvmExecutorServer.
type MockZkvmExecutorServerMockRecorder struct {
	mock *MockZkvmExecutorServer
}

// NewMockZkvmExecutorServer creates a new mock instance.
func NewMockZkvmExecutorServer(ctrl *gomock.Controller) *MockZkvmExecutorServer {
	mock := &MockZkvmExecutorServer{ctrl: ctrl}
	mock.recorder = &MockZkvmExecutorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZkvmExecutorServer) EXPECT() *MockZkvmExecutorServerMockRecorder {
	return m.recorder
}

// CreateElf mocks base method.
func (m *MockZkvmExecutorServer) CreateElf(arg0 context.Context, arg1 *types.CreateElfRequest) (*types.CreateElfResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateElf", arg0, arg1)
	ret0, _ := ret[0].(*types.CreateElfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElf indicates an expected call of CreateElf.
func (mr *MockZkvmExecutorServerMockRecorder) CreateElf(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElf", reflect.TypeOf((*MockZkvmExecutorServer)(nil).CreateElf), arg0, arg1)
}

// Execute mocks base method.
func (m *MockZkvmExecutorServer) Execute(arg0 context.Context, arg1 *types.ExecuteRequest) (*types.ExecuteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*types.ExecuteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockZkvmExecutorServerMockRecorder) Execute(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockZkvmExecutorServer)(nil).Execute), arg0, arg1)
}

// mustEmbedUnimplementedZkvmExecutorServer mocks base method.
func (m *MockZkvmExecutorServer) mustEmbedUnimplementedZkvmExecutorServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedZkvmExecutorServer")
}

// mustEmbedUnimplementedZkvmExecutorServer indicates an expected call of mustEmbedUnimplementedZkvmExecutorServer.
func (mr *MockZkvmExecutorServerMockRecorder) mustEmbedUnimplementedZkvmExecutorServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedZkvmExecutorServer", reflect.TypeOf((*MockZkvmExecutorServer)(nil).mustEmbedUnimplementedZkvmExecutorServer))
}

// MockUnsafeZkvmExecutorServer is a mock of UnsafeZkvmExecutorServer interface.
type MockUnsafeZkvmExecutorServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeZkvmExecutorServerMockRecorder
}

// MockUnsafeZkvmExecutorServerMockRecorder is the mock recorder for MockUnsafeZkvmExecutorServer.
type MockUnsafeZkvmExecutorServerMockRecorder struct {
	mock *MockUnsafeZkvmExecutorServer
}

// NewMockUnsafeZkvmExecutorServer creates a new mock instance.
func NewMockUnsafeZkvmExecutorServer(ctrl *gomock.Controller) *MockUnsafeZkvmExecutorServer {
	mock := &MockUnsafeZkvmExecutorServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeZkvmExecutorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeZkvmExecutorServer) EXPECT() *MockUnsafeZkvmExecutorServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedZkvmExecutorServer mocks base method.
func (m *MockUnsafeZkvmExecutorServer) mustEmbedUnimplementedZkvmExecutorServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedZkvmExecutorServer")
}

// mustEmbedUnimplementedZkvmExecutorServer indicates an expected call of mustEmbedUnimplementedZkvmExecutorServer.
func (mr *MockUnsafeZkvmExecutorServerMockRecorder) mustEmbedUnimplementedZkvmExecutorServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedZkvmExecutorServer", reflect.TypeOf((*MockUnsafeZkvmExecutorServer)(nil).mustEmbedUnimplementedZkvmExecutorServer))
}
