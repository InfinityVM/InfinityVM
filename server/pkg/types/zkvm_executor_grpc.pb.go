// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: server/v1/zkvm_executor.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ZkvmExecutor_Execute_FullMethodName   = "/server.v1.ZkvmExecutor/execute"
	ZkvmExecutor_CreateElf_FullMethodName = "/server.v1.ZkvmExecutor/create_elf"
)

// ZkvmExecutorClient is the client API for ZkvmExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZkvmExecutorClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	CreateElf(ctx context.Context, in *CreateElfRequest, opts ...grpc.CallOption) (*CreateElfResponse, error)
}

type zkvmExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewZkvmExecutorClient(cc grpc.ClientConnInterface) ZkvmExecutorClient {
	return &zkvmExecutorClient{cc}
}

func (c *zkvmExecutorClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, ZkvmExecutor_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zkvmExecutorClient) CreateElf(ctx context.Context, in *CreateElfRequest, opts ...grpc.CallOption) (*CreateElfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateElfResponse)
	err := c.cc.Invoke(ctx, ZkvmExecutor_CreateElf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZkvmExecutorServer is the server API for ZkvmExecutor service.
// All implementations must embed UnimplementedZkvmExecutorServer
// for forward compatibility
type ZkvmExecutorServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	CreateElf(context.Context, *CreateElfRequest) (*CreateElfResponse, error)
	mustEmbedUnimplementedZkvmExecutorServer()
}

// UnimplementedZkvmExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedZkvmExecutorServer struct {
}

func (UnimplementedZkvmExecutorServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedZkvmExecutorServer) CreateElf(context.Context, *CreateElfRequest) (*CreateElfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateElf not implemented")
}
func (UnimplementedZkvmExecutorServer) mustEmbedUnimplementedZkvmExecutorServer() {}

// UnsafeZkvmExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZkvmExecutorServer will
// result in compilation errors.
type UnsafeZkvmExecutorServer interface {
	mustEmbedUnimplementedZkvmExecutorServer()
}

func RegisterZkvmExecutorServer(s grpc.ServiceRegistrar, srv ZkvmExecutorServer) {
	s.RegisterService(&ZkvmExecutor_ServiceDesc, srv)
}

func _ZkvmExecutor_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZkvmExecutorServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZkvmExecutor_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZkvmExecutorServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZkvmExecutor_CreateElf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateElfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZkvmExecutorServer).CreateElf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZkvmExecutor_CreateElf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZkvmExecutorServer).CreateElf(ctx, req.(*CreateElfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZkvmExecutor_ServiceDesc is the grpc.ServiceDesc for ZkvmExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZkvmExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.v1.ZkvmExecutor",
	HandlerType: (*ZkvmExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "execute",
			Handler:    _ZkvmExecutor_Execute_Handler,
		},
		{
			MethodName: "create_elf",
			Handler:    _ZkvmExecutor_CreateElf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/v1/zkvm_executor.proto",
}
